function cart_open() {
    setTimeout(function () {
      $.ajax({
          url: "/",
          type: "GET",
          dataType: "html",
          success: function (t) {
              $(".cart_count_icon").html($(t).find(".cart_count_icon").html()),
                  $(".drawer__inner").removeClass("overlay-applied"),
                  $(".cart_drawer_custom").html($(t).find(".cart_drawer_custom").html()),
                  $(".unlockmsg").html($(t).find(".unlockshtml").html()),
                  $(".cart-all-products").slick({ dots: !0, infinite: !0, speed: 300, slidesToShow: 1, slidesToScroll: 1, dots: !0, arrows: !0 });
                  jQuery("a.open-cart-drawer-new").trigger("click");
          },
          error: function (t, e, i) {},
      });
  }, 500);

}
function quick_open() {
jQuery("a.open-cart-drawer-new").trigger("click");
}



function cart_update() {
  $.ajax({
      url: "/",
      type: "GET",
      dataType: "html",
      success: function (t) {
          $(".cart_count_icon").html($(t).find(".cart_count_icon").html()),
              $(".drawer__inner").removeClass("overlay-applied"),
              $(".cart_drawer_custom").html($(t).find(".cart_drawer_custom").html()),
              $(".unlockmsg").html($(t).find(".unlockshtml").html()),
              $(".cart-all-products").slick({ dots: !0, infinite: !0, speed: 300, slidesToShow: 1, slidesToScroll: 1, dots: !0, arrows: !0 });
      },
      error: function (t, e, i) {},
  });
}
(window.theme = window.theme || {}),
  console && console.log && console.log("Streamline theme (" + theme.settings.themeVersion + ") by ARCHÎžTYPE | Learn more at https://archetypethemes.co"),
  (window.lazySizesConfig = window.lazySizesConfig || {}),
  (lazySizesConfig.expFactor = 4),
  (function (t) {
      var e,
          i,
          n,
          a,
          t = (jQuery = t);
      (theme.utils = {
          defaultTo: function (t, e) {
              return null == t || t != t ? e : t;
          },
          promiseStylesheet: function () {
              return (
                  void 0 === this.stylesheetPromise &&
                      (this.stylesheetPromise = t.Deferred(function (t) {
                          var e = document.querySelector('link[href="' + theme.stylesheet + '"]');
                          e.loaded && t.resolve(),
                              onloadCSS(e, function () {
                                  t.resolve();
                              });
                      })),
                  this.stylesheetPromise
              );
          },
      }),
          (theme.a11y = {
              trapFocus: function (e) {
                  var i = { focusin: e.namespace ? "focusin." + e.namespace : "focusin", focusout: e.namespace ? "focusout." + e.namespace : "focusout", keydown: e.namespace ? "keydown." + e.namespace : "keydown.handleFocus" },
                      n = e.$container.find(t('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])').filter(":visible")),
                      a = n[0],
                      s = n[n.length - 1];
                  e.$elementToFocus || (e.$elementToFocus = e.$container),
                      e.$container.attr("tabindex", "-1"),
                      e.$elementToFocus.focus(),
                      t(document).off("focusin"),
                      t(document).on(i.focusout, function () {
                          t(document).off(i.keydown);
                      }),
                      t(document).on(i.focusin, function (e) {
                          (e.target === s || e.target === a) &&
                              t(document).on(i.keydown, function (t) {
                                  var e;
                                  9 === (e = t).keyCode && (e.target !== s || e.shiftKey || (e.preventDefault(), a.focus()), e.target === a && e.shiftKey && (e.preventDefault(), s.focus()));
                              });
                      });
              },
              removeTrapFocus: function (e) {
                  var i = e.namespace ? "focusin." + e.namespace : "focusin";
                  e.$container && e.$container.length && e.$container.removeAttr("tabindex"), t(document).off(i);
              },
              lockMobileScrolling: function (e, i) {
                  if (i) var n = i;
                  else var n = t(document.documentElement).add("body");
                  n.on("touchmove" + e, function () {
                      return !1;
                  });
              },
              unlockMobileScrolling: function (e, i) {
                  if (i) var n = i;
                  else var n = t(document.documentElement).add("body");
                  n.off(e);
              },
              promiseAnimationEnd: function (e) {
                  var i = "animationend webkitAnimationEnd oAnimationEnd",
                      n = 0,
                      a = t.Deferred().resolve();
                  return (
                      t.each(["animation-duration", "-moz-animation-duration", "-webkit-animation-duration", "-o-animation-duration"], function (t, i) {
                          n || (n = parseFloat(e.css(i)));
                      }),
                      n > 0 &&
                          (a = t.Deferred(function (t) {
                              e.on(i, function (n) {
                                  n.target === e[0] && (e.off(i), t.resolve());
                              });
                          })),
                      a
                  );
              },
              promiseTransitionEnd: function (e) {
                  var i = "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
                      n = 0,
                      a = t.Deferred().resolve();
                  return (
                      t.each(["transition-duration", "-moz-transition-duration", "-webkit-transition-duration", "-o-transition-duration"], function (t, i) {
                          n || (n = parseFloat(e.css(i)));
                      }),
                      n > 0 &&
                          (a = t.Deferred(function (t) {
                              e.on(i, function (n) {
                                  n.target === e[0] && (e.off(i), t.resolve());
                              });
                          })),
                      a
                  );
              },
          }),
          (theme.Sections = function e() {
              (this.constructors = {}),
                  (this.instances = []),
                  t(document)
                      .on("shopify:section:load", this._onSectionLoad.bind(this))
                      .on("shopify:section:unload", this._onSectionUnload.bind(this))
                      .on("shopify:section:select", this._onSelect.bind(this))
                      .on("shopify:section:deselect", this._onDeselect.bind(this))
                      .on("shopify:block:select", this._onBlockSelect.bind(this))
                      .on("shopify:block:deselect", this._onBlockDeselect.bind(this));
          }),
          (theme.Sections.prototype = t.extend({}, theme.Sections.prototype, {
              createInstance: function (e, i, n) {
                  var a = t(e),
                      s = a.attr("data-section-id"),
                      o = a.attr("data-section-type");
                  if (void 0 !== (i = i || this.constructors[o])) {
                      if (n && this._findInstance(s)) return;
                      var r = t.extend(new i(e), { id: s, type: o, container: e, namespace: "." + o + "-" + s });
                      this.instances.push(r);
                  }
              },
              _onSectionLoad: function (e, i, n) {
                  AOS && AOS.refreshHard();
                  var a = i || t("[data-section-id]", e.target)[0];
                  if (a) {
                      this.createInstance(a);
                      var s = i ? n : this._findInstance(e.detail.sectionId);
                      i || this.loadSubSections(), s && "function" == typeof s.onLoad && s.onLoad(e);
                  }
              },
              loadSubSections: function (e) {
                  (e ? e.find("[data-subsection]") : t("[data-subsection]")).each(
                      function (e, i) {
                          this._onSectionLoad(null, i, t(i).data("section-id"));
                      }.bind(this)
                  ),
                      AOS && AOS.refreshHard();
              },
              _onSectionUnload: function (t) {
                  var e = this._removeInstance(t.detail.sectionId);
                  e && "function" == typeof e.onUnload && e.onUnload(t);
              },
              _onSelect: function (t) {
                  var e = this._findInstance(t.detail.sectionId);
                  e && "function" == typeof e.onSelect && e.onSelect(t);
              },
              _onDeselect: function (t) {
                  var e = this._findInstance(t.detail.sectionId);
                  e && "function" == typeof e.onDeselect && e.onDeselect(t);
              },
              _onBlockSelect: function (t) {
                  var e = this._findInstance(t.detail.sectionId);
                  e && "function" == typeof e.onBlockSelect && e.onBlockSelect(t);
              },
              _onBlockDeselect: function (t) {
                  var e = this._findInstance(t.detail.sectionId);
                  e && "function" == typeof e.onBlockDeselect && e.onBlockDeselect(t);
              },
              _findInstance: function (t) {
                  for (var e = 0; e < this.instances.length; e++) if (this.instances[e].id === t) return this.instances[e];
              },
              _removeInstance: function (t) {
                  for (var e, i = this.instances.length; i--; )
                      if (this.instances[i].id === t) {
                          (e = this.instances[i]), this.instances.splice(i, 1);
                          break;
                      }
                  return e;
              },
              reinitSection: function (t) {
                  for (var e = 0; e < sections.instances.length; e++) {
                      var i = sections.instances[e];
                      i.type === t && "function" == typeof i.forceReload && i.forceReload();
                  }
              },
              register: function (e, i, n) {
                  this.constructors[e] = i;
                  var a = t("[data-section-type=" + e + "]");
                  n && (a = t("[data-section-type=" + e + "]", n)),
                      a.each(
                          function (t, e) {
                              this.createInstance(e, i, n);
                          }.bind(this)
                      );
              },
          })),
          (theme.Currency = {
              formatMoney: function t(e, i) {
                  "string" == typeof e && (e = e.replace(".", ""));
                  var n = "",
                      a = /\{\{\s*(\w+)\s*\}\}/,
                      s = i || "${{amount}}";
                  function o(t, e, i, n) {
                      if (((e = theme.utils.defaultTo(e, 2)), (i = theme.utils.defaultTo(i, ",")), (n = theme.utils.defaultTo(n, ".")), isNaN(t) || null == t)) return 0;
                      var a,
                          s = (t = (t / 100).toFixed(e)).split(".");
                      return s[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + i) + (s[1] ? n + s[1] : "");
                  }
                  switch (s.match(a)[1]) {
                      case "amount":
                          n = o(e, 2);
                          break;
                      case "amount_no_decimals":
                          n = o(e, 0);
                          break;
                      case "amount_with_comma_separator":
                          n = o(e, 2, ".", ",");
                          break;
                      case "amount_no_decimals_with_comma_separator":
                          n = o(e, 0, ".", ",");
                          break;
                      case "amount_no_decimals_with_space_separator":
                          n = o(e, 0, " ");
                  }
                  return s.replace(a, n);
              },
              getBaseUnit: function t(e) {
                  if (e && e.unit_price_measurement && e.unit_price_measurement.reference_value)
                      return 1 === e.unit_price_measurement.reference_value ? e.unit_price_measurement.reference_unit : e.unit_price_measurement.reference_value + e.unit_price_measurement.reference_unit;
              },
          }),
          (theme.Images = {
              imageSize: function t(e) {
                  if (!e) return "620x";
                  var i = e.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);
                  return null !== i ? i[1] : null;
              },
              getSizedImageUrl: function t(e, i) {
                  if (null == i) return e;
                  if ("master" === i) return this.removeProtocol(e);
                  var n = e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);
                  if (null != n) {
                      var a = e.split(n[0]),
                          s = n[0];
                      return this.removeProtocol(a[0] + "_" + i + s);
                  }
                  return null;
              },
              removeProtocol: function t(e) {
                  return e.replace(/http(s)?:/, "");
              },
          }),
          (theme.Variants = (function () {
              function e(e) {
                  (this.$container = e.$container),
                      (this.variants = e.variants),
                      (this.singleOptionSelector = e.singleOptionSelector),
                      (this.originalSelectorId = e.originalSelectorId),
                      (this.enableHistoryState = e.enableHistoryState),
                      (this.currentVariant = this._getVariantFromOptions()),
                      t(this.singleOptionSelector, this.$container).on("change", this._onSelectChange.bind(this));
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      _getCurrentOptions: function () {
                          var e = t.map(t(this.singleOptionSelector, this.$container), function (e) {
                              var i = t(e),
                                  n = i.attr("type"),
                                  a = {};
                              return "radio" !== n && "checkbox" !== n ? ((a.value = i.val()), (a.index = i.data("index")), a) : !!i[0].checked && ((a.value = i.val()), (a.index = i.data("index")), a);
                          });
                          return this._compact(e);
                      },
                      _getVariantFromOptions: function () {
                          var e = this._getCurrentOptions(),
                              i = this.variants,
                              n = !1,
                              a = t(".secondproducthandle_for_JS").data("secondproducthandle"),
                              s = i.length,
                              o = t(".secondproducthandle_for_JS").data("totaljson");
                          return (
                              s >= o ||
                                  jQuery.getJSON("/products/" + a + ".js", function (t) {
                                      for (var e = t.variants.length, n = 0; n < e; n++) {
                                          var a = t.variants[n];
                                          !1 == i.includes(a) && i.push(a);
                                      }
                                  }),
                              i.forEach(function (t) {
                                  var i = !0;
                                  t.options,
                                      e.forEach(function (e) {
                                          i && (i = t[e.index] === e.value);
                                      }),
                                      i && (n = t);
                              }),
                              n || null
                          );
                      },
                      _onSelectChange: function () {
                          var t = this._getVariantFromOptions();
                          this.$container.trigger({ type: "variantChange", variant: t }),
                              document.dispatchEvent(new CustomEvent("variant:change", { detail: { variant: t } })),
                              t &&
                                  (this._updateMasterSelect(t), this._updateImages(t), this._updatePrice(t), this._updateUnitPrice(t), this._updateSKU(t), (this.currentVariant = t), this.enableHistoryState && this._updateHistoryState(t));
                      },
                      _updateImages: function (t) {
                          var e = t.featured_image || {},
                              i = this.currentVariant.featured_image || {};
                          t.featured_image && e.src !== i.src && this.$container.trigger({ type: "variantImageChange", variant: t });
                      },
                      _updatePrice: function (t) {
                          (t.price !== this.currentVariant.price || t.compare_at_price !== this.currentVariant.compare_at_price) && this.$container.trigger({ type: "variantPriceChange", variant: t });
                      },
                      _updateUnitPrice: function (t) {
                          t.unit_price !== this.currentVariant.unit_price && this.$container.trigger({ type: "variantUnitPriceChange", variant: t });
                      },
                      _updateSKU: function (t) {
                          t.sku !== this.currentVariant.sku && this.$container.trigger({ type: "variantSKUChange", variant: t });
                      },
                      _updateHistoryState: function (t) {
                          if (history.replaceState && t) {
                              var e = window.location.protocol + "//" + window.location.host + window.location.pathname + "?variant=" + t.id;
                              window.history.replaceState({ path: e }, "", e);
                              var varqty = parseInt(variantStock[t.id])
                             if(varqty < 1){
                                /*
                                $(".add-to-cart span").html("PRE-ORDER")
                                $(".preorder-text").show()
                                */
                                $(".add-to-cart span").html("SOLD OUT")
                             }else{
                                $(".add-to-cart span").html("ADD TO BAG")
                                $(".preorder-text").hide()
                             }
                          }
                      },
                      _updateMasterSelect: function (e) {
                          t(this.originalSelectorId, this.$container).val(e.id);
                      },
                      _compact: function (t) {
                          for (var e = -1, i = null == t ? 0 : t.length, n = 0, a = []; ++e < i; ) {
                              var s = t[e];
                              s && (a[n++] = s);
                          }
                          return a;
                      },
                  })),
                  e
              );
          })()),
          (theme.rte = {
              init: function () {
                  theme.rte.wrapTable(), theme.rte.wrapVideo(), theme.rte.imageLinks();
              },
              wrapTable: function () {
                  t(".rte table").wrap('<div class="table-wrapper"></div>');
              },
              wrapVideo: function () {
                  var e = t('.rte iframe[src*="youtube.com/embed"], .rte iframe[src*="player.vimeo"]'),
                      i = e.add("iframe#admin_bar_iframe");
                  e.each(function () {
                      t(this).parents(".video-wrapper").length || t(this).wrap('<div class="video-wrapper"></div>');
                  }),
                      i.each(function () {
                          this.src = this.src;
                      });
              },
              imageLinks: function () {
                  t(".rte a img").parent().addClass("rte__image");
              },
          }),
          (theme.LibraryLoader =
              ((i = { requested: "requested", loaded: "loaded" }),
              (n = "https://cdn.shopify.com/shopifycloud/"),
              (a = {
                  youtubeSdk: { tagId: "youtube-sdk", src: "https://www.youtube.com/iframe_api", type: (e = { link: "link", script: "script" }).script },
                  shopifyXr: { tagId: "shopify-model-viewer-xr", src: n + "shopify-xr-js/assets/v1.0/shopify-xr.en.js", type: e.script },
                  modelViewerUi: { tagId: "shopify-model-viewer-ui", src: n + "model-viewer-ui/assets/v1.0/model-viewer-ui.en.js", type: e.script },
                  modelViewerUiStyles: { tagId: "shopify-model-viewer-ui-styles", src: n + "model-viewer-ui/assets/v1.0/model-viewer-ui.css", type: e.link },
              }),
              {
                  load: function t(n, s) {
                      var o,
                          r = a[n];
                      if (r && r.status !== i.requested) {
                          if (((s = s || function () {}), r.status === i.loaded)) {
                              s();
                              return;
                          }
                          switch (((r.status = i.requested), r.type)) {
                              case e.script:
                                  o =
                                      ((c = r),
                                      (d = s),
                                      (l = document.createElement("script")),
                                      (l.src = c.src),
                                      l.addEventListener("load", function () {
                                          (c.status = i.loaded), d();
                                      }),
                                      l);
                                  break;
                              case e.link:
                                  o =
                                      ((h = r),
                                      (u = s),
                                      (p = document.createElement("link")),
                                      (p.href = h.src),
                                      (p.rel = "stylesheet"),
                                      (p.type = "text/css"),
                                      p.addEventListener("load", function () {
                                          (h.status = i.loaded), u();
                                      }),
                                      p);
                          }
                          (o.id = r.tagId), (r.element = o);
                          var c,
                              d,
                              l,
                              h,
                              u,
                              p,
                              f = document.getElementsByTagName(r.type)[0];
                          f.parentNode.insertBefore(o, f);
                      }
                  },
              })),
          (theme.Modals = (function () {
              function e(e, i, n) {
                  if (((this.id = e), (this.$modal = t("#" + e)), !this.$modal.length)) return !1;
                  (this.nodes = { $parent: t("html").add("body"), $modalContent: this.$modal.find(".modal__inner") }),
                      (this.config = t.extend({ close: ".js-modal-close", open: ".js-modal-open-" + i, openClass: "modal--is-active", bodyOpenClass: "modal-open", closeOffContentClick: !0 }, n)),
                      (this.modalIsOpen = !1),
                      (this.$focusOnOpen = this.config.focusOnOpen ? t(this.config.focusOnOpen) : this.$modal),
                      this.init();
              }
              return (
                  (e.prototype.init = function () {
                      t(this.config.open).attr("aria-expanded", "false"),
                          t(this.config.open).on("click", this.open.bind(this)),
                          this.$modal.find(this.config.close).on("click", this.close.bind(this)),
                          t("body").on(
                              "drawerOpen",
                              function () {
                                  this.close();
                              }.bind(this)
                          );
                  }),
                  (e.prototype.open = function (e) {
                      var i = !1;
                      !this.modalIsOpen &&
                          (e ? e.preventDefault() : (i = !0),
                          e && e.stopPropagation && (e.stopPropagation(), (this.$activeSource = t(e.currentTarget).attr("aria-expanded", "true"))),
                          this.modalIsOpen && !i && this.close(),
                          this.$modal.addClass(this.config.openClass),
                          this.nodes.$parent.addClass(this.config.bodyOpenClass),
                          setTimeout(
                              function () {
                                  this.$modal.addClass("aos-animate");
                              }.bind(this),
                              0
                          ),
                          (this.modalIsOpen = !0),
                          theme.a11y.trapFocus({ $container: this.$modal, $elementToFocus: this.$focusOnOpen, namespace: "modal_focus" }),
                          t("body").trigger("modalOpen." + this.id),
                          this.bindEvents());
                  }),
                  (e.prototype.close = function () {
                      this.modalIsOpen &&
                          (t(document.activeElement).trigger("blur"),
                          this.$modal.removeClass(this.config.openClass).removeClass("aos-animate"),
                          this.nodes.$parent.removeClass(this.config.bodyOpenClass),
                          (this.modalIsOpen = !1),
                          theme.a11y.removeTrapFocus({ $container: this.$modal, namespace: "modal_focus" }),
                          this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "false").focus(),
                          t("body").trigger("modalClose." + this.id),
                          this.unbindEvents());
                  }),
                  (e.prototype.bindEvents = function () {
                      this.nodes.$parent.on(
                          "keyup.modal",
                          function (t) {
                              27 === t.keyCode && this.close();
                          }.bind(this)
                      ),
                          this.config.closeOffContentClick &&
                              (this.$modal.on("click.modal", this.close.bind(this)),
                              this.nodes.$modalContent.on("click.modal", function (t) {
                                  t.stopImmediatePropagation();
                              }));
                  }),
                  (e.prototype.unbindEvents = function () {
                      this.nodes.$parent.off(".modal"), this.config.closeOffContentClick && (this.$modal.off(".modal"), this.nodes.$modalContent.off(".modal"));
                  }),
                  e
              );
          })()),
          (theme.ProductScreen = (function () {
              var e = document.title,
                  i = "productscreen",
                  n = 0;
              function a(e, i, n) {
                  if (((this.id = e), (this.$screen = t("#" + e)), (this.title = this.$screen.data("product-title")), !this.$screen.length)) return !1;
                  (this.nodes = { $parent: t("html").add("body"), $body: t("body"), $loader: t("#OverscrollLoader").find(".icon-loader__path"), $screenContent: this.$screen.find(".screen-layer__inner"), $photoswipe: t(".pswp") }),
                      (this.config = t.extend(
                          {
                              close: ".js-screen-close",
                              open: ".js-screen-open-" + i,
                              openClass: "screen-layer--is-active",
                              closeSlideAnimate: "screen-layer--is-sliding",
                              bodyOpenClass: "screen-layer-open",
                              bodyClosingClass: "screen-layer-closing",
                              bodyCloseAnimate: "screen-layer-closing screen-layer-animating",
                              loaderStart: 200,
                              pullToCloseThreshold: -100,
                          },
                          n
                      )),
                      (this.initalized = !1),
                      (this.isOpen = !1),
                      (this.$focusOnOpen = this.config.focusOnOpen ? t(this.config.focusOnOpen) : this.$screen),
                      this.init();
              }
              return (
                  t("#MainContent"),
                  (a.prototype.init = function () {
                      t(this.config.open).attr("aria-expanded", "false"),
                          t("body").on("click", this.config.open, this.open.bind(this)),
                          this.$screen.find(this.config.close).on("click", { noAnimate: !0, back: !0 }, this.close.bind(this)),
                          "sticky" === theme.settings.cartType &&
                              (this.nodes.$body.on(
                                  "added." + this.id,
                                  function () {
                                      theme.headerNav.toggleThumbMenu(!1, !0), this.close(!1, { back: !0 });
                                  }.bind(this)
                              ),
                              this.nodes.$body.on(
                                  "error." + this.id,
                                  function () {
                                      this.initalized && this.open();
                                  }.bind(this)
                              ));
                  }),
                  (a.prototype.open = function (e, a) {
                      var s = !1,
                          o = { updateCurrentPath: !a || a.updateCurrentPath };
                      if (!this.isOpen) {
                          e ? e.preventDefault() : (s = !0),
                              e && e.stopPropagation && (e.stopPropagation(), (this.$activeSource = t(e.currentTarget))),
                              this.isOpen && !s && this.close(),
                              (n = window.scrollY),
                              this.$screen.prepareTransition().addClass(this.config.openClass),
                              this.nodes.$parent.addClass(this.config.bodyOpenClass),
                              this.nodes.$screenContent.scrollTop(0),
                              window.scrollTo(0, 0),
                              theme.a11y.trapFocus({ $container: this.$screen, $elementToFocus: this.$focusOnOpen, namespace: i }),
                              this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "true");
                          var r = this.$activeSource.data("url");
                          this.nodes.$body.trigger("productModalOpen." + this.id).trigger("newPopstate", { screen: this, url: r, updateCurrentPath: o.updateCurrentPath }),
                              (this.initalized = !0),
                              (this.isOpen = !0),
                              (document.title = this.title),
                              window.ga && ga("send", "pageview", { page: r }),
                              this.bindEvents();
                      }
                  }),
                  (a.prototype.close = function (a, s) {
                      var o = s || (a ? a.data : null),
                          r = !!o && o.back,
                          c = !!o && !!o.noAnimate;
                      this.nodes.$body.removeAttr("style"), this.nodes.$loader.css("stroke-dashoffset", this.config.loaderStart), r && this.nodes.$body.trigger("newPopstate", { screen: this, back: !0 });
                      var d = c ? "" : this.config.closeSlideAnimate,
                          l = c ? this.config.bodyClosingClass : this.config.bodyCloseAnimate;
                      this.isOpen &&
                          (t(document.activeElement).trigger("blur"),
                          this.$screen.prepareTransition().removeClass(this.config.openClass).addClass(d),
                          this.nodes.$parent.removeClass(this.config.bodyOpenClass).addClass(l),
                          window.setTimeout(
                              function () {
                                  this.$screen.removeClass(d), this.nodes.$parent.removeClass(l), window.scrollTo(0, n);
                              }.bind(this),
                              500
                          ),
                          theme.a11y.removeTrapFocus({ $container: this.$screen, namespace: i }),
                          this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "false").focus(),
                          this.nodes.$body.trigger("productModalClose").trigger("productModalClose." + this.id),
                          window.scrollTo(0, n),
                          (this.isOpen = !1),
                          (document.title = e),
                          window.ga && ga("send", "pageview"),
                          this.unbindEvents());
                  }),
                  (a.prototype.bindEvents = function () {
                      this.nodes.$body.on(
                          "keyup." + i,
                          function (t) {
                              27 === t.keyCode && !(this.nodes.$photoswipe.hasClass("pswp--open") || this.nodes.$body.hasClass("js-drawer-open")) && this.close(!1, { back: !0 });
                          }.bind(this)
                      );
                      var e = 0,
                          n = 0;
                      t(document).on(
                          "touchmove." + i,
                          t.throttle(
                              15,
                              function (t) {
                                  var i = window.scrollY;
                                  !(i >= 0) &&
                                      ((e = -(i / 100)),
                                      this.nodes.$body.css("background", "rgba(0,0,0," + e + ")"),
                                      (n = this.config.loaderStart + 2 * i),
                                      i <= this.config.pullToCloseThreshold && (n = 0),
                                      this.nodes.$loader.css("stroke-dashoffset", n));
                              }.bind(this)
                          )
                      ),
                          t(document).on(
                              "touchend." + i,
                              function (t) {
                                  (totalLoader = this.config.loaderStart), window.scrollY < this.config.pullToCloseThreshold && this.close(!1, { back: !0 });
                              }.bind(this)
                          );
                  }),
                  (a.prototype.unbindEvents = function () {
                      this.nodes.$body.off("." + i), t(document).off("." + i);
                  }),
                  a
              );
          })()),
          (theme.Drawers = (function () {
              function e(e, i) {
                  if (
                      ((this.config = { id: e, close: ".js-drawer-close", open: ".js-drawer-open-" + i, openClass: "js-drawer-open", closingClass: "js-drawer-closing", activeDrawer: "drawer--is-open", namespace: ".drawer-" + i }),
                      (this.$nodes = { parent: t(document.documentElement).add("body"), page: t("body") }),
                      (this.$drawer = t("#" + e)),
                      !this.$drawer.length)
                  )
                      return !1;
                  (this.isOpen = !1), this.init();
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      init: function () {
                          var e = t(this.config.open);
                          e.attr("aria-expanded", "false"), e.on("click", this.open.bind(this)), this.$drawer.find(this.config.close).on("click", this.close.bind(this));
                      },
                      open: function (e, i) {
                          if ((e && e.preventDefault(), !this.isOpen)) {
                              if (e && e.stopPropagation) e.stopPropagation(), (this.$activeSource = t(e.currentTarget).attr("aria-expanded", "true"));
                              else if (i) {
                                  var n = t(i);
                                  this.$activeSource = n.attr("aria-expanded", "true");
                              }
                              this.$drawer.prepareTransition().addClass(this.config.activeDrawer),
                                  this.$nodes.parent.addClass(this.config.openClass),
                                  (this.isOpen = !0),
                                  theme.a11y.trapFocus({ $container: this.$drawer, namespace: "drawer_focus" }),
                                  t("body").trigger("drawerOpen." + this.config.id),
                                  this.bindEvents();
                          }
                      },
                      close: function () {
                          this.isOpen &&
                              (t(document.activeElement).trigger("blur"),
                              this.$drawer.prepareTransition().removeClass(this.config.activeDrawer),
                              this.$nodes.parent.removeClass(this.config.openClass),
                              this.$nodes.parent.addClass(this.config.closingClass),
                              window.setTimeout(
                                  function () {
                                      this.$nodes.parent.removeClass(this.config.closingClass), this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "false").focus();
                                  }.bind(this),
                                  500
                              ),
                              (this.isOpen = !1),
                              theme.a11y.removeTrapFocus({ $container: this.$drawer, namespace: "drawer_focus" }),
                              this.unbindEvents());
                      },
                      bindEvents: function () {
                          theme.a11y.lockMobileScrolling(this.config.namespace, this.$nodes.page),
                              this.$nodes.page.on(
                                  "click" + this.config.namespace,
                                  function (t) {
                                      if (t.target === this.$nodes.page[0]) return this.close(), !1;
                                  }.bind(this)
                              ),
                              this.$nodes.parent.on(
                                  "keyup" + this.config.namespace,
                                  function (t) {
                                      27 === t.keyCode && this.close();
                                  }.bind(this)
                              );
                      },
                      unbindEvents: function () {
                          theme.a11y.unlockMobileScrolling(this.config.namespace, this.$nodes.page), this.$nodes.parent.off(this.config.namespace), this.$nodes.page.off(this.config.namespace);
                      },
                  })),
                  e
              );
          })()),
          (theme.cart = {
              getCart: function () {
                  return t.getJSON(theme.routes.cart);
              },
              changeItem: function (t, e) {
                  return this._updateCart({ type: "POST", url: theme.routes.cartChange, data: "quantity=" + e + "&id=" + t, dataType: "json" });
              },
              addItemFromForm: function (t) {
                  return this._updateCart({ type: "POST", url: theme.routes.cartAdd, data: t, dataType: "json" });
              },
              _updateCart: function (e) {
                  return t.ajax(e).then(
                      function (e) {
                          return t("body").trigger("updateCart", e), e;
                      }.bind(this)
                  );
              },
              updateNote: function (e) {
                  var i = { type: "POST", url: "/cart/update.js", data: "note=" + theme.cart.attributeToString(e), dataType: "json", success: function (t) {}, error: function (t, e) {} };
                  t.ajax(i);
              },
              attributeToString: function (e) {
                  return "string" != typeof e && "undefined" == (e += "") && (e = ""), t.trim(e);
              },
          }),
          t(function () {
              t("body").on("click", ".cart__checkout", function () {
                  t(this).addClass("btn--loading");
              }),
                  t("body").on("change", 'textarea[name="note"]', function () {
                      var e = t(this).val();
                      theme.cart.updateNote(e);
                  }),
                  t("body").on("click", ".cart__checkout--ajax", function (e) {
                      if (!t("#CartAgree").is(":checked")) return alert(theme.strings.cartTermsConfirmation), t(this).removeClass("btn--loading"), !1;
                  }),
                  t("body").on("click", ".cart__checkout--page", function (e) {
                      if (!t("#CartPageAgree").is(":checked")) return alert(theme.strings.cartTermsConfirmation), t(this).removeClass("btn--loading"), !1;
                  });
          }),
          (theme.AjaxCart = (function () {
              var e = { itemId: "data-cart-item-id" },
                  i = {
                      form: "form.cart",
                      cartCount: ".cart-link__count",
                      updateBtn: ".update-cart",
                      itemList: "[data-cart-item-list]",
                      item: "[data-cart-item]",
                      itemId: "[data-cart-item-id]",
                      itemHref: "[data-cart-item-href]",
                      itemBackgroundImage: "[data-cart-item-background-image]",
                      itemTitle: "[data-cart-item-title]",
                      itemVariantTitle: "[data-cart-item-variant-title]",
                      itemPropertyList: "[data-cart-item-property-list]",
                      itemProperty: "[data-cart-item-property]",
                      itemDiscountList: "[data-cart-item-discount-list]",
                      itemDiscount: "[data-cart-item-discount]",
                      itemDiscountTitle: "[data-cart-item-discount-title]",
                      itemDiscountAmount: "[data-cart-item-discount-amount]",
                      itemLabelQuantity: "[data-cart-item-label-quantity]",
                      itemInputQuantity: "[data-cart-item-input-quantity]",
                      itemDelete: "[data-cart-item-delete]",
                      itemPriceContainer: "[data-cart-item-price-container]",
                      itemLinePriceContainer: "[data-cart-item-line-price-container]",
                      itemUnitPrice: "[data-cart-item-unit-price]",
                      itemMessage: "[data-item-message]",
                      cartDiscountContainer: "[data-cart-discount-container]",
                      cartDiscountContent: "[data-cart-discount-content]",
                      cartDiscount: "[data-cart-discount]",
                      cartDiscountTitle: "[data-cart-discount-title]",
                      cartDiscountAmount: "[data-cart-discount-amount]",
                      cartNoteContainer: "[data-cart-note-container]",
                      cartNoteInput: "[data-cart-note]",
                      cartMessage: "[data-cart-message]",
                      cartSubtotal: "[data-cart-subtotal]",
                      cartSubmit: "[data-cart-submit]",
                  },
                  n = { cartHasItems: "cart-has-items", cartTemplate: "ajax-cart__template", cartItemRemove: "cart__item--remove", staticDrawerElement: "drawer--cart--static" };
              function a(e) {
                  this.id = e;
                  var i = (this.$container = t("#" + e));
                  (this.status = { loaded: !1, loading: !1, isDrawer: i.attr("data-drawer") }), this.status.isDrawer && (this.drawer = new theme.Drawers(e, "cart")), this.init(), this.initEventListeners();
              }
              return (
                  (a.prototype = t.extend({}, a.prototype, {
                      init: function () {
                          (this.$form = t(i.form, this.$container)),
                              t(i.updateBtn, this.$form).addClass("hide"),
                              (this.$itemTemplate = t(i.item, this.$form).first().clone()),
                              (this.$propertyTemplate = t(i.itemProperty, this.$form).first().clone()),
                              (this.$discountTemplate = t(i.itemDiscount, this.$form).first().clone()),
                              (this.$cartDiscountTemplate = t(i.cartDiscount, this.$container).first().clone());
                      },
                      initEventListeners: function () {
                          t("body").on(
                              "updateCart",
                              function (t, e) {
                                  theme.cart.getCart().then(
                                      function (t) {
                                          this.buildCart(t), this.updateCartNotification(t);
                                          var e = !1;
                                          this.status.isDrawer && (this.drawer.open(), (e = !0));
                                      }.bind(this)
                                  );
                              }.bind(this)
                          ),
                              this.$container.on("click", i.itemDelete, this._onItemDelete.bind(this)),
                              this.$container.on("input", i.itemInputQuantity, t.debounce(500, this._onItemQuantityChange.bind(this))),
                              this.$container.on("blur", i.itemInputQuantity, this._onItemQuantityEmptyBlur.bind(this)),
                              this.$container.on("focus", i.itemInputQuantity, this._highlightText);
                      },
                      buildCart: function (t, e) {
                          if ((this.loading(!0), this.$form.removeClass("cart--empty"), 0 === t.item_count)) {
                              this.$form.addClass("cart--empty"), (this.status.loaded = !0), this.loading(!1);
                              return;
                          }
                          t.items.length > 2 ? this.$container.removeClass(n.staticDrawerElement) : this.$container.addClass(n.staticDrawerElement);
                          var i = this._createCart(t);
                          morphdom(this.$form[0], i[0]),
                              window.Shopify && Shopify.StorefrontExpressButtons && Shopify.StorefrontExpressButtons.initialize(),
                              this.status.isDrawer && !0 === e && this.drawer.open(),
                              (this.status.loaded = !0),
                              this.loading(!1),
                              document.dispatchEvent(new CustomEvent("cart:updated", { detail: { cart: t } }));
                      },
                      _createCart: function (e) {
                          var n = this.$form.clone();
                          return (
                              t(i.item, n).not(i.cartNoteContainer).remove(),
                              t(i.itemList, n).prepend(this._createItemList(e)),
                              t(i.cartNoteInput, n).val(e.note),
                              t(i.cartDiscountContainer, n).toggleClass("hide", 0 === e.cart_level_discount_applications.length),
                              t(i.cartDiscountContent, n).html(this._createCartDiscountList(e)),
                              t(i.cartSubtotal, n).html(theme.Currency.formatMoney(e.total_price, theme.settings.moneyFormat)),
                              t(i.cartSubmit, n).attr("disabled", 0 === e.items.length),
                              n
                          );
                      },
                      _createItemList: function (a) {
                          return t.map(
                              a.items,
                              function (a) {
                                  var s = this.$itemTemplate.clone().removeClass(n.cartTemplate),
                                      o = this._createPropertyList(a),
                                      r = this._createDiscountList(a),
                                      c = this._createUnitPrice(a),
                                      d = this._createItemPrice(a.original_price, a.final_price),
                                      l = this._createItemPrice(a.original_line_price, a.final_line_price);
                                  return (
                                      s.find(i.itemId).addBack(i.itemId).attr(e.itemId, a.key),
                                      t(i.itemHref, s).attr("href", a.url),
                                      t(i.itemBackgroundImage, s)
                                          .removeAttr("data-bgset")
                                          .css("background-image", a.image ? "url(" + theme.Images.getSizedImageUrl(a.image, "200x") + ")" : "none")
                                          .addClass("lazyload"),
                                      t(i.itemTitle, s).text(a.product_title),
                                      t(i.itemVariantTitle, s).text(a.variant_title),
                                      t(i.itemPriceContainer, s).html(d),
                                      t(i.itemLinePriceContainer, s).html(l),
                                      t(i.itemLinePrice, s).html(theme.Currency.formatMoney(a.line_price, theme.settings.moneyFormat)),
                                      t(i.itemLabelQuantity, s).attr("for", "quantity_" + a.key),
                                      t(i.itemInputQuantity, s)
                                          .attr("name", "updates[" + a.key + "]")
                                          .attr("id", "quantity_" + a.key)
                                          .val(a.quantity),
                                      t(i.itemPropertyList, s).html(o),
                                      t(i.itemDiscountList, s).html(r),
                                      t(i.itemUnitPrice, s).html(c),
                                      s[0]
                                  );
                              }.bind(this)
                          );
                      },
                      _createItemPrice: function (t, e) {
                          return t !== e
                              ? '<span class="visually-hidden">' +
                                    theme.strings.regularPrice +
                                    '</span><del class="cart__item-price--original">' +
                                    theme.Currency.formatMoney(t, theme.settings.moneyFormat) +
                                    '</del><span class="visually-hidden">' +
                                    theme.strings.salePrice +
                                    '</span><span class="cart__item-price cart__item-price--bold">' +
                                    theme.Currency.formatMoney(e, theme.settings.moneyFormat) +
                                    "</span>"
                              : '<span class="cart__item-price">' + theme.Currency.formatMoney(t, theme.settings.moneyFormat) + "</span>";
                      },
                      _createPropertyList: function (e) {
                          return t.map(
                              e.properties,
                              function (t, e) {
                                  var i = this.$propertyTemplate.clone().removeClass(n.cartTemplate);
                                  if ("_" !== e.charAt(0) && "" !== t) return -1 === t.indexOf("/uploads/") ? i.text(e + ": " + t) : i.html(e + ': <a href="' + t + '">' + t.split("/").pop() + "</a>"), i[0];
                              }.bind(this)
                          );
                      },
                      _createDiscountList: function (e) {
                          return t.map(
                              e.line_level_discount_allocations,
                              function (t) {
                                  var e = this.$discountTemplate.clone().removeClass(n.cartTemplate);
                                  return e.find(i.itemDiscountTitle).text(t.discount_application.title), e.find(i.itemDiscountAmount).html(theme.Currency.formatMoney(t.amount, theme.settings.moneyFormat)), e[0];
                              }.bind(this)
                          );
                      },
                      _createCartDiscountList: function (e) {
                          return t.map(
                              e.cart_level_discount_applications,
                              function (t) {
                                  var e = this.$cartDiscountTemplate.clone().removeClass(n.cartTemplate);
                                  return e.find(i.cartDiscountTitle).text(t.title), e.find(i.cartDiscountAmount).html(theme.Currency.formatMoney(t.total_allocated_amount, theme.settings.moneyFormat)), e[0];
                              }.bind(this)
                          );
                      },
                      _createUnitPrice: function (t) {
                          var e;
                          return theme.Currency.formatMoney(t.unit_price, theme.settings.moneyFormat) + "/" + theme.Currency.getBaseUnit(t);
                      },
                      _onItemQuantityChange: function (n) {
                          this.loading(!0);
                          var a = t(n.target),
                              s = a.closest(i.item).attr(e.itemId),
                              o = a.val();
                          if ("" !== o) {
                              if (0 == o && !1 === confirm(theme.strings.cartConfirmDelete)) {
                                  a.val(1), this.loading(!1);
                                  return;
                              }
                              theme.cart.changeItem(s, o);
                          }
                      },
                      _onItemQuantityEmptyBlur: function (n) {
                          var a = t(n.target);
                          a.closest(i.item).attr(e.itemId),
                              "" === a.val() &&
                                  theme.cart.getCart().then(
                                      function (t) {
                                          this.buildCart(t);
                                      }.bind(this)
                                  );
                      },
                      _onItemDelete: function (a) {
                          a.preventDefault();
                          var s = t(a.target),
                              o = t(i.item, this.$container),
                              r = s.closest(i.item),
                              c = t(i.cartNoteContainer, this.$container),
                              d = r.attr(e.itemId);
                          2 === o.length &&
                              o.last().is(c) &&
                              (c.addClass(n.cartItemRemove),
                              theme.a11y.promiseTransitionEnd(t(i.itemList, this.$container)).then(function () {
                                  c.removeClass(n.cartItemRemove);
                              })),
                              r.addClass(n.cartItemRemove),
                              theme.a11y.promiseAnimationEnd(r).then(
                                  function () {
                                      theme.cart.changeItem(d, 0);
                                  }.bind(this)
                              );
                      },
                      loading: function (e) {
                          (this.status.loading = e), e ? t(i.itemList, this.$form).addClass("loading") : t(i.itemList, this.$form).removeClass("loading");
                      },
                      updateCartNotification: function (e) {
                          t(i.cartCount).text(e.item_count), t("body").toggleClass(n.cartHasItems, e.item_count > 0);
                      },
                      _highlightText: function (e) {
                          theme.config.isTouch || t(e.target).select();
                      },
                  })),
                  a
              );
          })()),
          (theme.StickyCart = (function () {
              var e = { cart: "#StickyCart", items: "#StickyItems", subtotal: "#StickySubtotal", submit: "#StickySubmit" },
                  i = { cartTemplate: "template-cart", active: "sticky-cart--open", activeBodyClass: "body--sticky-cart-open" };
              function n() {
                  (this.status = { loaded: !1, loading: !1, open: t("body").hasClass(i.activeBodyClass) }), this.initEventListeners();
              }
              return (
                  (n.prototype = t.extend({}, n.prototype, {
                      initEventListeners: function () {
                          t(e.submit).on("click", function () {
                              t(this).addClass("btn--loading");
                          }),
                              t("body").on(
                                  "added.ajaxProduct",
                                  function () {
                                      this.hideCart(),
                                          theme.cart.getCart().then(
                                              function (t) {
                                                  this.buildCart(t, !0);
                                              }.bind(this)
                                          );
                                  }.bind(this)
                              );
                      },
                      hideCart: function () {
                          t("body").removeClass(i.activeBodyClass), t(e.cart).removeClass(i.active);
                      },
                      showCart: function (n, a) {
                          n && t(e.items).text(theme.strings.cartItems.replace("[count]", n)),
                              a && t(e.subtotal).html(theme.Currency.formatMoney(a, theme.settings.moneyFormat)),
                              t("body").addClass(i.activeBodyClass),
                              t(e.cart).addClass(i.active),
                              (this.status.open = !0);
                      },
                      buildCart: function (t, e) {
                          this.loading(!0), (this.status.loaded = !0), this.loading(!1), !0 === e && this.showCart(t.item_count, t.total_price), "undefined" != typeof ACSCurrency && void 0 !== ACSCurrency.moneyFormats && mlvedaload();
                      },
                      loading: function (i) {
                          (this.status.loading = i), i ? t(e.cart).addClass("is-loading") : t(e.cart).removeClass("is-loading");
                      },
                      updateError: function (t) {
                          t.responseJSON && t.responseJSON.description && console.warn(t.responseJSON.description);
                      },
                  })),
                  {
                      init: n,
                      refresh: function n(a) {
                          !t("body").hasClass(i.cartTemplate) &&
                              (a.item_count > 0 ? (t("body").addClass(i.activeBodyClass), t(e.cart).addClass(i.active)) : (t("body").removeClass(i.activeBodyClass), t(e.cart).removeClass(i.active)),
                              t(e.items).text(theme.strings.cartItems.replace("[count]", a.item_count)),
                              t(e.subtotal).html(theme.Currency.formatMoney(a.total_price, theme.settings.moneyFormat)));
                      },
                  }
              );
          })()),
          (theme.AjaxProduct = (function () {
              var e = { loading: !1 };
              function i(t) {
                  (this.$form = t), (this.$addToCart = this.$form.find(".add-to-cart")), (this.productId = t.find('[name="data-product-id"]').val()), this.$form.length && this.$form.on("submit", this.addItemFromForm.bind(this));
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      addItemFromForm: function (i, n) {
                          if ((i.preventDefault(), !e.loading)) {
                              e.loading = !0;
                              var a = this.$form.serialize();
                              t("body").trigger("added.ProductScreen-" + this.productId),
                                  theme.cart
                                      .addItemFromForm(a)
                                      .then(
                                          function (t) {
                                              this.success(t);
                                          }.bind(this)
                                      )
                                      .catch(
                                          function (t) {
                                              this.error(t);
                                          }.bind(this)
                                      )
                                      .always(
                                          function () {
                                              e.loading = !1;
                                          }.bind(this)
                                      );
                          }
                      },
                      success: function (e) {
                          this.$form.find(".errors").remove(), t("body").trigger("added.ajaxProduct"), document.dispatchEvent(new CustomEvent("added:ajaxProduct", { detail: { product: e } })), cart_update();
                      },
                      error: function (e) {
                          this.$form.find(".errors").remove(),
                              e.responseJSON &&
                                  e.responseJSON.description &&
                                  (console.warn(e.responseJSON.description),
                                  t("body").trigger("error.ProductScreen-" + this.productId),
                                  document.dispatchEvent(new CustomEvent("error:ajaxProduct", { detail: { errorMessage: e.responseJSON.description } })),
                                  this.$form.prepend('<div class="errors text-center">' + e.responseJSON.description + "</div>"));
                      },
                  })),
                  i
              );
          })()),
          t(document).on("click", ".btn.custom-ajax-cart", function (e) {
              let i = t(this),
                  n = i.attr("data-variant"),
                  a = i.attr("data-quantity"),
                  s = i.find("span"),
                  o = t(".site-nav__link .cart-link__count").text(),
                  r = s.html(),
                  c = Number(1e3 * i.attr("data-duration"));
              t.ajax({
                  type: "POST",
                  url: "/cart/add.js",
                  dataType: "json",
                  data: "quantity=" + a + "&id=" + n,
                  beforeSend: function t() {
                      i.prop("disabled", !0), console.log(i.attr("data-adding")), s.html(i.attr("data-adding")), console.log(o);
                  },
                  success: function e() {
                      console.log(i.attr("data-added")), s.html(i.attr("data-added")), t("body").addClass("cart-has-items");
                      var n = parseInt(o) + parseInt(a);
                      t(".cart-link__count").text(n), console.log("cart:", n);
                  },
                  error: function t() {
                      console.log("not added to cart"), s.html("Error Adding to cart!");
                  },
              }).done(function () {
                  console.log("done"),
                      setTimeout(function () {
                          s.html(r), i.prop("disabled", !1), console.log(c);
                      }, c);
              });
          }),
          (theme.collapsibles = (function () {
              var e = { trigger: ".collapsible-trigger", module: ".collapsible-content", moduleInner: ".collapsible-content__inner", tabs: ".collapsible-trigger--tab" },
                  i = { hide: "hide", open: "is-open", autoHeight: "collapsible--auto-height", tabs: "collapsible-trigger--tab" },
                  n = ".collapsible",
                  a = !1;
              function s(t, e, n, s) {
                  if ((t.removeClass(i.hide).prepareTransition().css("height", e).toggleClass(i.open, !n), !n && s)) {
                      var o = t;
                      window.setTimeout(function () {
                          o.css("height", "auto"), (a = !1);
                      }, 0);
                  } else a = !1;
              }
              return {
                  init: function o() {
                      t(e.trigger).each(function () {
                          var e = t(this),
                              n = e.hasClass(i.open);
                          e.attr("aria-expanded", n);
                      }),
                          t("body")
                              .off(n)
                              .on("click" + n, e.trigger, function () {
                                  if (!a) {
                                      a = !0;
                                      var n,
                                          o = t(this),
                                          r = o.hasClass(i.open),
                                          c = o.hasClass(i.tabs),
                                          d = t("#" + o.attr("aria-controls")),
                                          l = d.find(e.moduleInner).outerHeight(),
                                          h = o.hasClass(i.autoHeight);
                                      if (c) {
                                          if (r) {
                                              a = !1;
                                              return;
                                          }
                                          t(e.tabs + "[data-id=" + o.data("id") + "]").each(function () {
                                              t(this).removeClass(i.open), (n = t("#" + t(this).attr("aria-controls"))), s(n, 0, !0);
                                          });
                                      }
                                      r &&
                                          h &&
                                          setTimeout(function () {
                                              s(d, (l = 0), r, h);
                                          }, 0),
                                          r && !h && (l = 0),
                                          o.attr("aria-expanded", !r).toggleClass(i.open, !r),
                                          s(d, l, r, h);
                                  }
                              });
                  },
              };
          })()),
          (theme.headerNav = (function () {
              var e,
                  i,
                  n,
                  a,
                  s,
                  o,
                  r = {
                      wrapper: ".header-wrapper",
                      siteHeader: ".site-header",
                      logoContainer: ".site-header__logo",
                      logo: ".site-header__logo img",
                      navigation: ".site-navigation",
                      navContainerWithLogo: ".header-item--logo",
                      navItems: ".site-nav__item",
                      navLinks: ".site-nav__link",
                      navLinksWithDropdown: ".site-nav__link--has-dropdown",
                      navDropdownLinks: ".site-nav__dropdown-link--second-level",
                      thumbMenu: ".site-nav__thumb-menu",
                  },
                  c = {
                      hasDropdownClass: "site-nav--has-dropdown",
                      hasSubDropdownClass: "site-nav__deep-dropdown-trigger",
                      dropdownActive: "is-focused",
                      stickyCartActive: "body--sticky-cart-open",
                      overlayEnabledClass: "header-wrapper--overlay",
                      overlayedClass: "is-light",
                      thumbMenuInactive: "site-nav__thumb-menu--inactive",
                      stickyClass: "site-header--sticky",
                      overlayStickyClass: "header-wrapper--sticky",
                      openTransitionClass: "site-header--opening",
                  },
                  d = { namespace: ".siteNav", overlayHeader: !1, stickyActive: !1, forceStickyOnMobile: !1, forceCloseThumbNav: !1 };
              function l() {
                  p(),
                      !t("body").hasClass(c.stickyCartActive) &&
                          theme.config.bpSmall &&
                          "product" !== theme.template &&
                          setTimeout(function () {
                              (d.forceStickyOnMobile = !0), g(!0);
                          }, 25),
                      "bar" === d.headerStyle &&
                          (o.wrap('<div class="site-header-sticky"></div>'),
                          !d.overlayHeader &&
                              (f(),
                              setTimeout(function () {
                                  f(),
                                      0 === t(".site-header-sticky").outerHeight() &&
                                          setTimeout(function () {
                                              e.trigger("resize");
                                          }, 500);
                              }, 200)));
              }
              function h() {
                  p(), u(), "bar" === d.headerStyle && f();
              }
              function u() {
                  theme.config.bpSmall ? (d.headerStyle = "button") : (d.headerStyle = s.data("header-style")), (d.stickyThreshold = "button" === d.headerStyle ? 100 : 250), "button" !== d.headerStyle && g(!1);
              }
              function p() {
                  t(r.logo).each(function () {
                      var e = t(this),
                          i = e.width(),
                          n = e.closest(".grid__item").width();
                      i > n ? e.css("maxWidth", n) : e.removeAttr("style");
                  });
              }
              function f() {
                  t(".site-header-sticky").css("height", o.outerHeight(!0));
              }
              function m(t) {
                  if (e.scrollTop() > d.stickyThreshold) {
                      if ((d.forceStickyOnMobile && (d.forceStickyOnMobile = !1), !d.stickyActive)) "button" === d.headerStyle ? g(!0) : "bar" === d.headerStyle && v(!0);
                  } else {
                      if (d.forceStickyOnMobile || !d.stickyActive) return;
                      "button" === d.headerStyle ? theme.config.bpSmall || g(!1) : "bar" === d.headerStyle && v(!1), d.overlayHeader || f();
                  }
              }
              function g(e, i) {
                  !(d.forceCloseThumbNav || t(".slide-nav__overflow--thumb").hasClass("js-menu--is-open")) && (t(r.thumbMenu).toggleClass(c.thumbMenuInactive, !e), (d.stickyActive = e), (d.forceCloseThumbNav = i));
              }
              function v(t) {
                  "bar" === d.headerStyle &&
                      (t
                          ? (o.addClass(c.stickyClass),
                            d.overlayHeader && s.removeClass(c.overlayedClass).addClass(c.overlayStickyClass),
                            setTimeout(function () {
                                o.addClass(c.openTransitionClass);
                            }, 100))
                          : (o.removeClass(c.openTransitionClass).removeClass(c.stickyClass), d.overlayHeader && s.addClass(c.overlayedClass).removeClass(c.overlayStickyClass)),
                      (d.stickyActive = t));
              }
              return {
                  init: function p() {
                      (e = t(window)),
                          (i = t(r.navContainerWithLogo)),
                          (n = t(r.logoContainer)),
                          (a = t(r.navigation)),
                          (s = t(r.wrapper)),
                          (o = t(r.siteHeader)),
                          (d.overlayHeader = theme.settings.overlayHeader = o.data("overlay")),
                          (function e() {
                              var i = !1,
                                  n = !1,
                                  a = !1;
                              function s(e) {
                                  var n = e.parent();
                                  if ((n.hasClass(c.hasDropdownClass) && (n.addClass(c.dropdownActive), (i = !0)), !theme.config.isTouch && !a)) {
                                      var s = theme.config.isTouch ? "touchend" : "click";
                                      (a = !0),
                                          t("body").on(s + d.namespace, function () {
                                              l(), t("body").off(d.namespace), (a = !1);
                                          });
                                  }
                              }
                              function o(t, e) {
                                  var i = t.parent();
                                  (i.hasClass(c.hasSubDropdownClass) || e) && (i.addClass(c.dropdownActive), (n = !0));
                              }
                              function l() {
                                  h(), u();
                              }
                              function h() {
                                  t(r.navItems).removeClass(c.dropdownActive);
                              }
                              function u() {
                                  t(r.navDropdownLinks).parent().removeClass(c.dropdownActive);
                              }
                              theme.config.isTouch &&
                                  (t(r.navLinksWithDropdown).on("touchend" + d.namespace, function (e) {
                                      var i = t(this);
                                      i.parent().hasClass(c.dropdownActive) ? window.location.replace(i.attr("href")) : (e.preventDefault(), l(), s(i));
                                  }),
                                  t(r.navDropdownLinks).on("touchend" + d.namespace, function (e) {
                                      var i = t(this),
                                          n = i.parent();
                                      n.hasClass(c.hasSubDropdownClass) ? (n.hasClass(c.dropdownActive) ? window.location.replace(i.attr("href")) : (e.preventDefault(), u(), o(i))) : window.location.replace(i.attr("href"));
                                  })),
                                  t(r.navLinks).on("focusin mouseover" + d.namespace, function () {
                                      i && h(), n && u(), s(t(this));
                                  }),
                                  t(r.navLinks).on("mouseleave" + d.namespace, function () {
                                      l();
                                  }),
                                  t(r.navDropdownLinks).on("focusin" + d.namespace, function () {
                                      u(), o(t(this), !0);
                                  });
                          })(),
                          new theme.Modals("SearchModal", "search-modal", { closeOffContentClick: !1, focusOnOpen: "#SearchModalInput" }),
                          e.on("resize" + d.namespace, t.debounce(150, h)).on("load" + d.namespace, l),
                          u(),
                          e.on("scroll" + d.namespace, t.throttle(150, m)),
                          Shopify.designMode && e.trigger("resize");
                  },
                  disableOverlayHeader: function e() {
                      t(r.wrapper).removeClass(c.overlayEnabledClass).removeClass(c.overlayedClass), (d.overlayHeader = theme.settings.overlayHeader = !1);
                  },
                  toggleThumbMenu: g,
                  unload: function e() {
                      t(window).off(d.namespace), t(r.navLinks).off(d.namespace), t(r.navDropdownLinks).off(d.namespace);
                  },
              };
          })()),
          (theme.slideNav = (function () {
              var e,
                  i,
                  n,
                  a = { container: "#PageContainer", navWrapper: ".slide-nav__overflow", nav: "#SlideNav", toggleBtn: ".js-toggle-slide-nav", subNavToggleBtn: ".js-toggle-submenu", thumbNavToggle: ".site-nav__thumb-button" },
                  s = { subNavLink: "slide-nav__sublist-link", return: "slide-nav__return-btn", isActive: "is-active", isOpen: "js-menu--is-open", subNavShowing: "sub-nav--is-open", thirdNavShowing: "third-nav--is-open" },
                  o = ".slideNav",
                  r = !0,
                  c = 1;
              function d() {
                  t(a.toggleBtn).hasClass(s.isActive)
                      ? l()
                      : (t(a.toggleBtn).addClass(s.isActive),
                        t(a.navWrapper).prepareTransition().addClass(s.isOpen),
                        r && t(a.container).css({ transform: "translate3d(0, " + t(a.navWrapper).height() + "px, 0)" }),
                        t(a.navWrapper).attr("tabindex", "-1").focus(),
                        t(window).on("keyup" + o, function (t) {
                            27 === t.which && l();
                        }));
              }
              function l() {
                  t(a.toggleBtn).removeClass(s.isActive), t(a.navWrapper).prepareTransition().removeClass(s.isOpen), r && t(a.container).removeAttr("style"), t(a.toggleBtn).focus(), t(window).off("keyup" + o);
              }
              function h(o) {
                  if (!e) {
                      var d,
                          l,
                          h,
                          u,
                          p,
                          f = t(o.currentTarget);
                      (e = !0),
                          f.hasClass(s.return)
                              ? (t(s.toggleBtn + '[data-level="' + (c - 1) + '"]').removeClass(s.isActive),
                                t('.slide-nav__dropdown[data-level="' + c + '"]')
                                    .prepareTransition()
                                    .removeClass(s.isActive),
                                n && n.length && n.removeClass(s.isActive))
                              : (f.addClass(s.isActive), f.next(".slide-nav__dropdown").prepareTransition().addClass(s.isActive)),
                          (n = f),
                          (c = (h = (l = f.data("target")) ? t('.slide-nav__dropdown[data-parent="' + l + '"]') : t(a.nav)).data("level") ? h.data("level") : 1),
                          (i = h),
                          l && h.find("." + s.subNavLink + ":first"),
                          (u = h.outerHeight()),
                          (p = c > 2 ? s.thirdNavShowing : s.subNavShowing),
                          t(a.navWrapper).css("height", u).removeClass(s.thirdNavShowing).addClass(p),
                          l || t(a.navWrapper).removeClass(s.thirdNavShowing).removeClass(s.subNavShowing),
                          (e = !1),
                          r && t(a.container).css({ transform: "translate3d(0, " + u + "px, 0)" });
                  }
              }
              return {
                  init: function e() {
                      t(a.thumbNavToggle).length && (r = !1), t(a.toggleBtn).on("click" + o, d), t(a.subNavToggleBtn).on("click" + o, h);
                  },
                  unload: function e() {
                      t(window).off(o), t(a.toggleBtn).off(o), t(a.subNavToggleBtn).off(o);
                  },
              };
          })()),
          (theme.articleImages = (function () {
              var e = {};
              function i() {
                  e.$rteImages.find("img").each(function () {
                      var i = t(this),
                          n = i.attr("style");
                      (!n || "float: none;" == n) && i.width() < e.$rteImages.width() && i.addClass("rte__no-indent");
                  });
              }
              return {
                  init: function n() {
                      (e.$rteImages = t(".rte--indented-images")), e.$rteImages.length && t(window).on("load", i);
                  },
              };
          })()),
          (theme.Slideshow = (function () {
              this.$slideshow = null;
              var e = { next: "is-next", init: "is-init", wrapper: "slideshow-wrapper", slideshow: "slideshow", currentSlide: "slick-current", pauseButton: "slideshow__pause", isPaused: "is-paused" };
              function i(i, n) {
                  (this.$slideshow = t(i)),
                      (this.$wrapper = this.$slideshow.closest("." + e.wrapper)),
                      (this.$pause = this.$wrapper.find("." + e.pauseButton)),
                      (this.settings = {
                          accessibility: !0,
                          arrows: !!n.arrows,
                          dots: !!n.dots,
                          draggable: !0,
                          touchThreshold: 8,
                          speed: 300,
                          pauseOnHover: !!n.pauseOnHover,
                          autoplay: this.$slideshow.data("autoplay"),
                          autoplaySpeed: this.$slideshow.data("speed"),
                      }),
                      this.$slideshow.on("init", this.init.bind(this)),
                      t(".root").find(this.$slideshow).length &&
                          t("body").on(
                              "productModalClose",
                              function () {
                                  this.$slideshow.addClass("slideshow-refresh"), this.$slideshow.slick("refresh");
                              }.bind(this)
                          ),
                      this.$slideshow.slick(this.settings),
                      this.$pause.on("click", this._togglePause.bind(this));
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      init: function (t, i) {
                          (this.$slideshowList = i.$list),
                              (this.$slickDots = i.$dots),
                              (this.$allSlides = i.$slides),
                              (this.slideCount = i.slideCount),
                              this.$slideshow.addClass(e.init),
                              this._a11y(),
                              this._clonedLazyloading(),
                              setTimeout(
                                  function () {
                                      this.$slideshow.slick("setPosition");
                                  }.bind(this),
                                  50
                              );
                      },
                      destroy: function () {
                          this.$slideshow.slick("unslick");
                      },
                      _play: function () {
                          this.$slideshow.slick("slickPause"), t(e.pauseButton).addClass("is-paused");
                      },
                      _pause: function () {
                          this.$slideshow.slick("slickPlay"), t(e.pauseButton).removeClass("is-paused");
                      },
                      _togglePause: function () {
                          var i = this._getSlideshowId(this.$pause);
                          this.$pause.hasClass(e.isPaused) ? (this.$pause.removeClass(e.isPaused), t(i).slick("slickPlay")) : (this.$pause.addClass(e.isPaused), t(i).slick("slickPause"));
                      },
                      _getSlideshowId: function (t) {
                          return "#Slideshow-" + t.data("id");
                      },
                      _activeSlide: function () {
                          return this.$slideshow.find(".slick-active");
                      },
                      _currentSlide: function () {
                          return this.$slideshow.find(".slick-current");
                      },
                      _nextSlide: function (t) {
                          return this.$slideshow.find('.slideshow__slide[data-slick-index="' + t + '"]');
                      },
                      _a11y: function () {
                          var i = this.$slideshowList,
                              n = this.settings.autoplay;
                          i &&
                              (i.removeAttr("aria-live"),
                              t(e.wrapper).on(
                                  "focusin",
                                  function (a) {
                                      t(e.wrapper).has(a.target).length && (i.attr("aria-live", "polite"), n && this._pause());
                                  }.bind(this)
                              ),
                              t(e.wrapper).on(
                                  "focusout",
                                  function (a) {
                                      t(e.wrapper).has(a.target).length && (i.removeAttr("aria-live"), n && this._play());
                                  }.bind(this)
                              ));
                      },
                      _clonedLazyloading: function () {
                          var e = this.$slideshow;
                          e.find(".slick-slide").each(
                              function (i, n) {
                                  var a = t(n);
                                  if (a.hasClass("slick-cloned")) {
                                      var s = a.data("id"),
                                          o = a.find(".hero__image").removeClass("lazyloading").addClass("lazyloaded");
                                      setTimeout(function () {
                                          var t = e.find(".slideshow__slide--" + s + ":not(.slick-cloned) .hero__image").attr("style");
                                          t && o.attr("style", t);
                                      }, this.settings.autoplaySpeed / 1.5);
                                  }
                              }.bind(this)
                          );
                      },
                  })),
                  i
              );
          })()),
          (theme.QuickShopScreens = (function () {
              var e = window.location.pathname,
                  i = e,
                  n = null,
                  a = null;
              "scrollRestoration" in history && (history.scrollRestoration = "manual");
              var s = { screensWrap: "#ProductScreens", screens: "[data-product-id]", trigger: ".quick-product__btn" },
                  o = [];
              function r(e) {
                  e.close(), (a = null), t(window).trigger("resize");
              }
              function c(e) {
                  var i = [];
                  return (
                      (e ? t(s.trigger, e) : t(s.trigger)).each(function () {
                          var e = t(this).data("product-id");
                          if (i.indexOf(e) > -1) {
                              t('.screen-layer--product[data-product-id="' + e + '"]')
                                  .slice(1)
                                  .remove();
                              return;
                          }
                          i.push(e);
                      }),
                      i
                  );
              }
              function d(e) {
                  for (var i, n, a = [], r = 0; r < e.length; r++) -1 === o.indexOf(e[r]) && ((n = t("#" + (i = "ProductScreen-" + e[r]))), a.push(n), o.push(e[r]), new theme.ProductScreen(i, "product-" + e[r]));
                  t(s.screensWrap).append(a);
              }
              return {
                  init: function s(o) {
                      if (theme.settings.quickView) {
                          var l = c();
                          d(l),
                              (function s() {
                                  !Shopify.designMode &&
                                      (t(window).on("newPopstate", function (t, s) {
                                          (a = s.screen),
                                              s.back && ((n = location.pathname), (i = e), history.pushState({}, "", e)),
                                              s.url && s.updateCurrentPath && ((n = location.pathname), (i = s.url), history.pushState({}, "", s.url));
                                      }),
                                      t(window).on(
                                          "popstate",
                                          function (s) {
                                              var o = !1;
                                              if (((n = i), location.pathname !== i)) {
                                                  if (((n = i), (i = location.pathname), location.pathname === e)) {
                                                      a && a.isOpen && r(a);
                                                      return;
                                                  }
                                                  if (-1 !== location.pathname.indexOf("/products/")) {
                                                      a
                                                          ? a.open()
                                                          : t('.quick-product__btn[href="' + location.pathname + '"]')
                                                                .first()
                                                                .trigger("click", { updateCurrentPath: !1 });
                                                      return;
                                                  }
                                                  if (s.originalEvent.state) {
                                                      if (a && a.isOpen) {
                                                          r(a), history.replaceState({}, "", e);
                                                          return;
                                                      }
                                                      o = !0;
                                                  } else if (a) {
                                                      if (a.isOpen) {
                                                          r(a);
                                                          return;
                                                      }
                                                  } else o = !0;
                                                  o && (window.location.href = location.href);
                                              }
                                          }.bind(this)
                                      ));
                              })();
                      }
                  },
                  unload: function e(i) {
                      if (theme.settings.quickView) {
                          for (
                              var n,
                                  a,
                                  o = [],
                                  r = c(i),
                                  d =
                                      ((n = t(s.trigger).not(t(s.trigger, i))),
                                      (a = []),
                                      n.each(function () {
                                          var e = t(this).data("product-id");
                                          a.push(e);
                                      }),
                                      a),
                                  l = 0;
                              l < r.length;
                              l++
                          ) {
                              var h = r[l];
                              -1 === d.indexOf(h) && o.push(h);
                          }
                          for (var l = 0; l < o.length; l++) sections._removeInstance(o[l]);
                      }
                  },
                  reInit: function e(i) {
                      if (theme.settings.quickView) {
                          var n = c(i);
                          d(n),
                              (function e(i, n) {
                                  for (var a = 0; a < i.length; a++) t('.screen-layer--product[data-product-id="' + i[a] + '"]', n).remove();
                              })(n, i),
                              sections.register("product-template", theme.Product, t("#ProductScreens"));
                      }
                  },
              };
          })()),
          (theme.HoverProductGrid = (function () {
              var e = { product: ".grid-product", slider: ".product-slider" };
              function i(t) {
                  if (((this.$container = t), (this.sectionId = this.$container.attr("data-section-id")), (this.namespace = ".product-image-slider-" + this.sectionId), (this.activeIds = []), theme.settings.hoverProductGrid))
                      (this.$products = t.find(e.product)),
                          (this.slidersMobile = t.data("product-sliders-mobile")),
                          0 !== this.$products.length &&
                              theme.utils.promiseStylesheet().then(
                                  function () {
                                      this.init();
                                  }.bind(this)
                              );
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      init: function () {
                          this.destroyAllSliders(), this.setupEventType(), this.listnerSetup();
                      },
                      setupEventType: function () {
                          this.$products.off("mouseenter mouseout"),
                              t(window).off("scroll" + this.namespace),
                              theme.config.bpSmall
                                  ? this.slidersMobile && (t(window).on("scroll" + this.namespace, t.throttle(120, this.inViewSliderInit.bind(this))), t(window).trigger("scroll" + this.namespace))
                                  : this.mouseSliderInit();
                      },
                      listnerSetup: function () {
                          t("body").on(
                              "matchSmall matchLarge",
                              function () {
                                  this.destroyAllSliders(), this.setupEventType();
                              }.bind(this)
                          );
                      },
                      inViewSliderInit: function () {
                          this.$products.find(e.slider).each(
                              function (e, i) {
                                  theme.isElementVisible(t(i), -400) ? this.initSlider(t(i)) : this.destroySlider(t(i));
                              }.bind(this)
                          );
                      },
                      mouseSliderInit: function () {
                          this.$products.on(
                              "mouseenter",
                              function (i) {
                                  var n = t(i.currentTarget).find(e.slider);
                                  this.initSlider(n);
                              }.bind(this)
                          ),
                              this.$products.on(
                                  "mouseleave",
                                  function (i) {
                                      var n = t(i.currentTarget).find(e.slider);
                                      this.destroySlider(n);
                                  }.bind(this)
                              );
                      },
                      initSlider: function (t) {
                          !(2 > t.data("image-count")) &&
                              -1 === this.activeIds.indexOf(t.data("id")) &&
                              (this.activeIds.push(t.data("id")), t.addClass("product-slider--init").slick({ autoplay: !0, infinite: !0, arrows: !1, speed: 300, fade: !0, pauseOnHover: !1, autoplaySpeed: 1050 }));
                      },
                      destroySlider: function (t) {
                          if (!(2 > t.data("image-count"))) {
                              var e = this.activeIds.indexOf(t.data("id"));
                              -1 !== e && (this.activeIds.splice(e, 1), t.slick("unslick"));
                          }
                      },
                      destroyAllSliders: function () {
                          this.$products.find(e.slider).each(
                              function (e, i) {
                                  this.destroySlider(t(i));
                              }.bind(this)
                          );
                      },
                  })),
                  i
              );
          })()),
          (theme.videoModal = function (e) {
              var i = null,
                  n = {
                      width: 1280,
                      height: 720,
                      playerVars: { autohide: 0, autoplay: 1, branding: 0, cc_load_policy: 0, fs: 0, iv_load_policy: 3, modestbranding: 1, playsinline: 1, quality: "hd720", rel: 0, showinfo: 0, wmode: "opaque" },
                      events: {
                          onReady: function t(e) {
                              e.target.playVideo();
                          },
                      },
                  },
                  a = "VideoHolder",
                  s = !1,
                  o = { videoHolder: "#" + a, youtube: 'a[href*="youtube.com/watch"], a[href*="youtu.be/"]', mp4Trigger: ".product-video-trigger--mp4", mp4Player: ".product-video-mp4-sound" };
              if (t(o.youtube).length || t(o.mp4Trigger).length) {
                  var r = new theme.Modals("VideoModal", "video-modal", { closeOffContentClick: !0, solid: !0 });
                  e && (t(o.youtube).off("click"), t(o.mp4Trigger).off("click")),
                      t(o.youtube).on("click", function e(i) {
                          d(),
                              i.preventDefault(),
                              theme.LibraryLoader.load("youtubeSdk"),
                              theme.config.youTubeReady
                                  ? c(i)
                                  : t("body").on("youTubeReady", function () {
                                        c(i);
                                    });
                      }),
                      t(o.mp4Trigger).on("click", function e(i) {
                          d(), t(i.currentTarget).next(o.mp4Player).clone().removeClass("hide").appendTo(o.videoHolder), r.open(i), t(o.videoHolder).find("video")[0].play(), (s = "mp4");
                      }),
                      e && t("body").off("modalClose.VideoModal"),
                      t("body").on("modalClose.VideoModal", function () {
                          i && "youtube" === s
                              ? setTimeout(function () {
                                    i.destroy();
                                }, 500)
                              : d();
                      });
              }
              function c(e) {
                  var o,
                      c,
                      d,
                      l = ((o = t(e.currentTarget).attr("href")), (c = o.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/)), !!c && 11 == c[7].length && c[7]),
                      h = t.extend({}, n, { videoId: l });
                  (h.playerVars.playsinline = theme.config.bpSmall ? 0 : 1), (i = new YT.Player(a, h)), r.open(e), (s = "youtube");
              }
              function d() {
                  t(o.videoHolder).empty();
              }
          }),
          (theme.Disclosure = (function () {
              var e = { disclosureList: "[data-disclosure-list]", disclosureToggle: "[data-disclosure-toggle]", disclosureInput: "[data-disclosure-input]", disclosureOptions: "[data-disclosure-option]" },
                  i = { listVisible: "disclosure-list--visible" };
              function n(t) {
                  (this.$container = t), (this.cache = {}), this._cacheSelectors(), this._connectOptions(), this._connectToggle(), this._onFocusOut();
              }
              return (
                  (n.prototype = t.extend({}, n.prototype, {
                      _cacheSelectors: function () {
                          this.cache = {
                              $disclosureList: this.$container.find(e.disclosureList),
                              $disclosureToggle: this.$container.find(e.disclosureToggle),
                              $disclosureInput: this.$container.find(e.disclosureInput),
                              $disclosureOptions: this.$container.find(e.disclosureOptions),
                          };
                      },
                      _connectToggle: function () {
                          this.cache.$disclosureToggle.on(
                              "click",
                              function (e) {
                                  var n = "true" === t(e.currentTarget).attr("aria-expanded");
                                  t(e.currentTarget).attr("aria-expanded", !n), this.cache.$disclosureList.toggleClass(i.listVisible);
                              }.bind(this)
                          );
                      },
                      _connectOptions: function () {
                          this.cache.$disclosureOptions.on(
                              "click",
                              function (e) {
                                  e.preventDefault(), this._submitForm(t(e.currentTarget).data("value"));
                              }.bind(this)
                          );
                      },
                      _onFocusOut: function () {
                          this.cache.$disclosureToggle.on(
                              "focusout",
                              function (t) {
                                  0 === this.$container.has(t.relatedTarget).length && this._hideList();
                              }.bind(this)
                          ),
                              this.cache.$disclosureList.on(
                                  "focusout",
                                  function (e) {
                                      var n = t(e.currentTarget).has(e.relatedTarget).length > 0;
                                      this.cache.$disclosureList.hasClass(i.listVisible) && !n && this._hideList();
                                  }.bind(this)
                              ),
                              this.$container.on(
                                  "keyup",
                                  function (t) {
                                      27 === t.which && (this._hideList(), this.cache.$disclosureToggle.focus());
                                  }.bind(this)
                              ),
                              t("body").on(
                                  "click",
                                  function (t) {
                                      var e = this.$container.has(t.target).length > 0;
                                      this.cache.$disclosureList.hasClass(i.listVisible) && !e && this._hideList();
                                  }.bind(this)
                              );
                      },
                      _submitForm: function (e) {
                          t("body").addClass("unloading"), this.cache.$disclosureInput.val(e), this.$container.parents("form").submit();
                      },
                      _hideList: function () {
                          this.cache.$disclosureList.removeClass(i.listVisible), this.cache.$disclosureToggle.attr("aria-expanded", !1);
                      },
                      unload: function () {
                          this.cache.$disclosureOptions.off(), this.cache.$disclosureToggle.off(), this.cache.$disclosureList.off(), this.$container.off();
                      },
                  })),
                  n
              );
          })()),
          (theme.ProductMedia = (function () {
              var e = {},
                  i = {},
                  n = {},
                  a = { mediaGroup: "[data-product-single-media-group]", xrButton: "[data-shopify-xr]" };
              function s(t) {
                  if (!t) {
                      for (var e in i)
                          if (i.hasOwnProperty(e)) {
                              var n = i[e];
                              n.modelViewerUi || (n.modelViewerUi = new Shopify.ModelViewerUI(n.$element)), o(n);
                          }
                  }
              }
              function o(t) {
                  var e = n[t.sectionId];
                  t.$container.on("mediaVisible", function () {
                      e.$element.attr("data-shopify-model3d-id", t.modelId), theme.config.isTouch || t.modelViewerUi.play();
                  }),
                      t.$container
                          .on("mediaHidden", function () {
                              e.$element.attr("data-shopify-model3d-id", e.defaultId), t.modelViewerUi.pause();
                          })
                          .on("xrLaunch", function () {
                              t.modelViewerUi.pause();
                          });
              }
              return {
                  init: function o(r, c) {
                      (e[c] = { loaded: !1 }),
                          r.each(function (e) {
                              var s = t(this),
                                  o = s.data("media-id"),
                                  r = t(s.find("model-viewer")[0]),
                                  d = r.data("model-id");
                              if (0 === e) {
                                  var l = s.closest(a.mediaGroup).find(a.xrButton);
                                  n[c] = { $element: l, defaultId: d };
                              }
                              i[o] = { modelId: d, sectionId: c, $container: s, $element: r };
                          }),
                          window.Shopify.loadFeatures([
                              {
                                  name: "shopify-xr",
                                  version: "1.0",
                                  onLoad: function i(n) {
                                      if (!n) {
                                          if (!window.ShopifyXR) {
                                              document.addEventListener("shopify_xr_initialized", function () {
                                                  i();
                                              });
                                              return;
                                          }
                                          for (var a in e)
                                              if (e.hasOwnProperty(a)) {
                                                  var s = e[a];
                                                  if (s.loaded) continue;
                                                  var o = t("#ModelJson-" + a);
                                                  window.ShopifyXR.addModels(JSON.parse(o.html())), (s.loaded = !0);
                                              }
                                          window.ShopifyXR.setupXRElements();
                                      }
                                  },
                              },
                              { name: "model-viewer-ui", version: "1.0", onLoad: s },
                          ]),
                          theme.LibraryLoader.load("modelViewerUiStyles");
                  },
                  removeSectionModels: function t(n) {
                      for (var a in i) i.hasOwnProperty(a) && i[a].sectionId === n && delete i[a];
                      delete e[n];
                  },
              };
          })()),
          (theme.customerTemplates = (function () {
              function e() {
                  t("#RecoverPasswordForm").toggleClass("hide"), t("#CustomerLoginForm").toggleClass("hide");
              }
              return {
                  init: function () {
                      var i, n;
                      "#recover" === window.location.hash && e(),
                          t("#RecoverPassword").on("click", function (t) {
                              t.preventDefault(), e();
                          }),
                          t("#HideRecoverPasswordLink").on("click", function (t) {
                              t.preventDefault(), e();
                          }),
                          t(".reset-password-success").length && t("#ResetSuccess").removeClass("hide"),
                          (i = t("#AddressNewForm")),
                          (n = t(".js-address-form")),
                          i.length &&
                              n.length &&
                              (Shopify &&
                                  t(".js-address-country").each(function () {
                                      var e = t(this),
                                          i = e.data("country-id"),
                                          n = e.data("province-id"),
                                          a = e.data("province-container-id");
                                      new Shopify.CountryProvinceSelector(i, n, { hideElement: a });
                                  }),
                              t(".address-new-toggle").on("click", function () {
                                  i.toggleClass("hide");
                              }),
                              t(".address-edit-toggle").on("click", function () {
                                  var e = t(this).data("form-id");
                                  t("#EditAddress_" + e).toggleClass("hide");
                              }),
                              t(".address-delete").on("click", function () {
                                  var e = t(this),
                                      i = e.data("form-id");
                                  confirm(e.data("confirm-message") || "Are you sure you wish to delete this address?") && Shopify.postLink("/account/addresses/" + i, { parameters: { _method: "delete" } });
                              }));
                  },
              };
          })()),
          (theme.Product = (function () {
              var e,
                  i = {
                      onSale: "sale-price",
                      disabled: "disabled",
                      isModal: "is-modal",
                      loading: "loading",
                      loaded: "loaded",
                      hidden: "hide",
                      interactable: "video-interactable",
                      visuallyHide: "visually-invisible",
                      thumbActive: "thumb--current",
                  },
                  n = {
                      variantsJson: "[data-variant-json]",
                      currentVariantJson: "[data-current-variant-json]",
                      imageContainer: "[data-product-images]",
                      mainSlider: "[data-product-photos]",
                      thumbSlider: "[data-product-thumbs]",
                      photo: "[data-product-photo]",
                      photoThumbs: "[data-product-thumb]",
                      photoThumbItem: "[data-product-thumb-item]",
                      zoomButton: ".product__photo-zoom",
                      priceWrapper: "[data-price-wrapper]",
                      price: "[data-product-price]",
                      comparePrice: "[data-product-price-compare]",
                      priceA11y: "[data-price-a11y]",
                      comparePriceA11y: "[data-compare-a11y]",
                      sku: "[data-sku]",
                      inventory: "[data-product-inventory]",
                      incomingInventory: "[data-product-incoming-inventory]",
                      unitWrapper: "[data-product-unit-wrapper]",
                      addToCart: "[data-add-to-cart]",
                      addToCartText: "[data-add-to-cart-text]",
                      varlabel: ".variant-input label",
                      originalSelectorId: "[data-product-select]",
                      singleOptionSelector: "[data-variant-input]",
                      variantColorSwatch: "[data-color-swatch]",
                      productImageMain: ".product-image-main",
                      dotsContainer: ".product__photo-dots",
                      productVideo: "[data-product-video]",
                      videoParent: ".product__video-wrapper",
                      currentSlide: ".slick-current",
                      startingSlide: ".starting-slide",
                      media: "[data-product-media-type-model]",
                      closeMedia: ".product-single__close-media",
                      modalFormHolder: "#ProductFormPlaceholder-",
                      formContainer: ".product-single__form",
                  },
                  a = {},
                  s = [],
                  o = {
                      height: "480",
                      width: "850",
                      playerVars: { autohide: 0, autoplay: 0, branding: 0, cc_load_policy: 0, controls: 0, fs: 0, iv_load_policy: 3, modestbranding: 1, playsinline: 1, quality: "hd720", rel: 0, showinfo: 0, wmode: "opaque" },
                  };
              function r(e) {
                  e && (c(e), t(window).on("scroll." + e, { id: e }, t.throttle(150, c)));
              }
              function c(e) {
                  var i, n, o;
                  if (e) {
                      if ("string" == typeof e) i = e;
                      else {
                          if (!e.data) return;
                          i = e.data.id;
                      }
                      if (theme.isElementVisible(t("#" + i))) {
                          if (a[i] && "unmuted" === a[i].style) return;
                          (n = i), s[n] && "function" == typeof s[n].playVideo && s[n].playVideo();
                      } else {
                          (o = i), s[o] && "function" == typeof s[o].pauseVideo && s[o].pauseVideo();
                      }
                  }
              }
              function d(t) {
                  t.closest(n.videoParent).addClass(i.loading);
              }
              function l(t) {
                  t.closest(n.videoParent).removeClass(i.loading).addClass(i.loaded);
              }
              function h(e) {
                  var i = (this.$container = t(e)),
                      a = (this.sectionId = i.attr("data-section-id"));
                  (this.inModal = i.closest(".screen-layer").length),
                      this.$modal,
                      (this.namespace = ".product-" + a),
                      (this.namespaceImages = ".product-image-" + a),
                      (this.settings = {
                          enableHistoryState: i.data("enable-history-state") || !1,
                          namespace: ".product-" + a,
                          variantType: i.data("variant-type"),
                          inventory: i.data("inventory") || !1,
                          inventoryThreshold: i.data("inventory-threshold") || !1,
                          incomingInventory: i.data("incoming-inventory") || !1,
                          modalInit: !1,
                          slickMainInitialized: !1,
                          slickThumbInitialized: !1,
                          hasImages: !0,
                          hasVideos: i.find(n.productVideo).length || !1,
                          videoStyle: i.data("video-style"),
                          has3d: !1,
                          hasMultipleImages: !1,
                          stackedImages: i.data("images-stacked") || !1,
                          stackedCurrent: 0,
                          stackedImagePositions: [],
                          imageSize: "620x",
                          videoLooping: i.data("video-looping"),
                      }),
                      (this.videos = {}),
                      this.inModal && ((this.settings.enableHistoryState = !1), (this.namespace = ".product-" + a + "-modal"), (this.$modal = t("#ProductScreen-" + a))),
                      this.init();
              }
              return (
                  (h.prototype = t.extend({}, h.prototype, {
                      init: function () {
                          (this.$mainSlider = t(n.mainSlider, this.$container)),
                              (this.$thumbSlider = t(n.thumbSlider, this.$container)),
                              (this.$firstProductImage = this.$mainSlider.find("img").first()),
                              (this.$formHolder = t(n.modalFormHolder + this.sectionId)),
                              this.$firstProductImage.length || (this.settings.hasImages = !1),
                              this.inModal &&
                                  (this.$container.addClass(i.isModal),
                                  t("body")
                                      .off("productModalOpen.ProductScreen-" + this.sectionId)
                                      .off("productModalClose.ProductScreen-" + this.sectionId),
                                  t("body").on("productModalOpen.ProductScreen-" + this.sectionId, this.openModalProduct.bind(this)),
                                  t("body").on("productModalClose.ProductScreen-" + this.sectionId, this.closeModalProduct.bind(this))),
                              this.inModal || (this.stringOverrides(), this.formSetup(), this.preImageSetup(), this.checkIfVideos(), this.imageSetup(!0));
                      },
                      formSetup: function () {
                          theme.settings.dynamicVariantsEnable && (this.$variantSelectors = t(n.formContainer, this.$container).find(n.singleOptionSelector)), this.initAjaxProductForm(), this.initVariants();
                      },
                      stringOverrides: function () {
                          (theme.productStrings = theme.productStrings || {}), t.extend(theme.strings, theme.productStrings);
                      },
                      initVariants: function () {
                          var e = t(n.variantsJson, this.$container);
                          if (e.length) {
                              this.variantsObject = JSON.parse(e[0].innerHTML);
                              var i = {
                                  $container: this.$container,
                                  enableHistoryState: this.settings.enableHistoryState,
                                  singleOptionSelector: n.singleOptionSelector,
                                  originalSelectorId: n.originalSelectorId,
                                  variants: this.variantsObject,
                              };
                              t(n.variantColorSwatch, this.$container).length &&
                                  t(n.variantColorSwatch, this.$container).on(
                                      "change",
                                      function (e) {
                                          var i = t(e.currentTarget),
                                              n = i.data("color-name"),
                                              a = i.data("color-index");
                                          this.updateColorName(n, a);
                                      }.bind(this)
                                  ),
                                  (this.variants = new theme.Variants(i)),
                                  this.$container
                                      .on("variantChange" + this.namespace, this.updateCartButton.bind(this))
                                      .on("variantImageChange" + this.namespace, this.updateVariantImage.bind(this))
                                      .on("variantPriceChange" + this.namespace, this.updatePrice.bind(this))
                                      .on("variantUnitPriceChange" + this.namespace, this.updateUnitPrice.bind(this)),
                                  t(n.sku, this.$container).length && this.$container.on("variantSKUChange" + this.namespace, this.updateSku.bind(this)),
                                  (this.settings.inventory || this.settings.incomingInventory) && this.$container.on("variantChange" + this.namespace, this.updateInventory.bind(this));
                              var a = t(n.currentVariantJson, this.$container);
                              theme.settings.dynamicVariantsEnable &&
                                  a.length &&
                                  ((this.currentVariantObject = JSON.parse(a[0].innerHTML)),
                                  this.$variantSelectors.on("change" + this.namespace, this.updateVariantAvailability.bind(this)),
                                  this.setCurrentVariantAvailability(this.currentVariantObject, !0));
                          }
                      },
                      initAjaxProductForm: function () {
                          ("drawer" === theme.settings.cartType || "sticky" === theme.settings.cartType) && new theme.AjaxProduct(t(n.formContainer, this.$container));
                      },
                      updateColorName: function (e, i) {
                          t("#VariantColorLabel-" + this.sectionId + "-" + i).text(e);
                      },
                      updateCartButton: function (e) {
                          var a = e.variant;
                          a
                              ? a.available
                                  ? (t(n.addToCart, this.$container).removeClass(i.disabled).prop("disabled", !1),
                                    t("body").hasClass("Body_preorder_Template") ? t(n.addToCartText, /* this.$container).html("Pre-order")*/ : t(n.addToCartText, this.$container).html(theme.strings.addToCart))
                                  : (t(n.addToCart, this.$container).addClass(i.disabled).prop("disabled", !0), t(n.addToCartText, this.$container).html("PRE-ORDER")),alert("xxxx")
                              : (t(n.addToCart, this.$container).removeClass(i.disabled).prop("disabled", !1), t(n.addToCartText, this.$container).html(theme.strings.unavailable));
                      },
                      updatePrice: function (e) {
                          var a = e.variant;
                          a &&
                              (t(n.price, this.$container).html(theme.Currency.formatMoney(a.price, theme.settings.moneyFormat)).show(),
                              a.compare_at_price > a.price
                                  ? (t(n.comparePrice, this.$container).html(theme.Currency.formatMoney(a.compare_at_price, theme.settings.moneyFormat)),
                                    t(n.priceWrapper, this.$container).removeClass("hide"),
                                    t(n.price, this.$container).addClass(i.onSale),
                                    t(n.comparePriceA11y, this.$container).attr("aria-hidden", "false"),
                                    t(n.priceA11y, this.$container).attr("aria-hidden", "false"))
                                  : (t(n.priceWrapper, this.$container).addClass("hide"),
                                    t(n.price, this.$container).removeClass(i.onSale),
                                    t(n.comparePriceA11y, this.$container).attr("aria-hidden", "true"),
                                    t(n.priceA11y, this.$container).attr("aria-hidden", "true")));
                      },
                      updateUnitPrice: function (e) {
                          var a = e.variant;
                          if (a && a.unit_price) {
                              var s = theme.Currency.formatMoney(a.unit_price, theme.settings.moneyFormat),
                                  o = theme.Currency.getBaseUnit(a);
                              t(n.unitWrapper, this.$container)
                                  .html(s + "/" + o)
                                  .removeClass("hide")
                                  .removeClass(i.visuallyHide);
                          } else t(n.unitWrapper, this.$container).addClass(i.visuallyHide);
                      },
                      updateSku: function (e) {
                          var i = e.variant,
                              a = "";
                          i && (i.sku && (a = i.sku), t(n.sku, this.$container).html(a));
                      },
                      updateInventory: function (t) {
                          var e = t.variant;
                          if (!e || !e.inventory_management) {
                              this.toggleInventoryQuantity(!1), this.toggleIncomingInventory(!1);
                              return;
                          }
                          if ("shopify" === e.inventory_management && window.inventories && window.inventories[this.sectionId]) {
                              var i = (variantInventoryObject = window.inventories[this.sectionId][e.id]).quantity,
                                  n = !0,
                                  a = !1;
                              (i <= 0 || i > this.settings.inventoryThreshold) && (n = !1),
                                  this.toggleInventoryQuantity(n, i),
                                  !n && variantInventoryObject.incoming && (a = !0),
                                  this.toggleIncomingInventory(a, e.available, variantInventoryObject.next_incoming_date);
                          }
                      },
                      toggleInventoryQuantity: function (e, i) {
                          this.settings.inventory || (e = !1), e ? t(n.inventory, this.$container).removeClass("hide").text(theme.strings.stockLabel.replace("[count]", i)) : t(n.inventory, this.$container).addClass("hide");
                      },
                      toggleIncomingInventory: function (e, i, a) {
                          if ((this.settings.incomingInventory || (e = !1), e)) {
                              var s = i ? theme.strings.willNotShipUntil.replace("[date]", a) : theme.strings.willBeInStockAfter.replace("[date]", a);
                              a || (s = theme.strings.waitingForStock), t(n.incomingInventory, this.$container).removeClass("hide").text(s);
                          } else t(n.incomingInventory, this.$container).addClass("hide");
                      },
                      checkIfVideos: function () {
                          var e = this.$mainSlider.find(n.productVideo);
                          if (!e.length) return !1;
                          var i = [];
                          return (
                              e.each(function () {
                                  var e = t(this).data("video-type");
                                  0 > i.indexOf(e) && i.push(e);
                              }),
                              i.indexOf("youtube") > -1 &&
                                  (theme.config.youTubeReady
                                      ? this.loadYoutubeVideos(e)
                                      : (theme.LibraryLoader.load("youtubeSdk"),
                                        t("body").on(
                                            "youTubeReady" + this.namespace,
                                            function () {
                                                this.loadYoutubeVideos(e);
                                            }.bind(this)
                                        ))),
                              i.indexOf("mp4") > -1 && this.loadMp4Videos(e),
                              i
                          );
                      },
                      initVideo: function (t) {
                          var i = t.data("video-type"),
                              n = t.attr("id");
                          "mp4" === i && "muted" === a[n].style && this.playMp4Video(n), "youtube" === i && e && "muted" === a[n].style && this.requestToPlayYoutubeVideo(n), this.inModal && this.resizeSlides();
                      },
                      stopVideo: function (t, e) {
                          t || (this.stopYoutubeVideo(), this.stopMp4Video()), "youtube" === e && this.stopYoutubeVideo(t), "mp4" === e && this.stopMp4Video(t);
                      },
                      getVideoType: function (t) {
                          return t.data("video-type");
                      },
                      getVideoId: function (t) {
                          return t.attr("id");
                      },
                      loadMp4Videos: function (e) {
                          e.each(
                              function (e, i) {
                                  var n = t(i);
                                  if ("mp4" == n.data("video-type")) {
                                      var s = n.attr("id");
                                      n.data("video-id"), (a[s] = this.videos[s] = { type: "mp4", divId: s, style: n.data("video-style") });
                                  }
                              }.bind(this)
                          );
                      },
                      loadYoutubeVideos: function (c) {
                          for (var h in (c.each(
                              function (e, o) {
                                  var c = t(o);
                                  if ("youtube" == c.data("video-type")) {
                                      var h = c.attr("id"),
                                          u = c.data("youtube-id");
                                      a[h] = this.videos[h] = {
                                          type: "youtube",
                                          id: h,
                                          videoId: u,
                                          style: c.data("video-style"),
                                          loop: c.data("video-loop"),
                                          attemptedToPlay: !1,
                                          events: {
                                              onReady: function (e) {
                                                  var i, o, c, u;
                                                  (i = e),
                                                      (s[(u = (c = t("#" + (o = h))).attr("id"))] = i.target),
                                                      s[u],
                                                      d(c),
                                                      "muted" === a[u].style && s[u].mute(),
                                                      l(c),
                                                      (c.closest(n.startingSlide).length || 1 === c.data("image-count")) && "muted" === a[u].style && (s[u].playVideo(), r(u));
                                              },
                                              onStateChange: function (e) {
                                                  !(function e(o, r) {
                                                      var c = t("#" + r),
                                                          d = c.attr("id"),
                                                          h = s[d];
                                                      switch (o.data) {
                                                          case -1:
                                                              a[d].attemptedToPlay &&
                                                                  (l(c),
                                                                  (function t(e) {
                                                                      e.closest(n.videoParent).addClass(i.interactable);
                                                                  })(c));
                                                              break;
                                                          case 0:
                                                              a[d] && a[d].loop && h.playVideo();
                                                              break;
                                                          case 1:
                                                              l(c);
                                                              break;
                                                          case 3:
                                                              a[d].attemptedToPlay = !0;
                                                      }
                                                  })(e, h);
                                              },
                                          },
                                      };
                                  }
                              }.bind(this)
                          ),
                          a))
                              if ("youtube" === a[h].type && a.hasOwnProperty(h)) {
                                  var u = t.extend({}, o, a[h]);
                                  "muted" === u.style || ((u.playerVars.controls = 1), (u.playerVars.autoplay = 0)), s[h] || (s[h] = new YT.Player(h, u));
                              }
                          e = !0;
                      },
                      requestToPlayYoutubeVideo: function (e, i) {
                          if (theme.config.youTubeReady) {
                              var n = t("#" + e);
                              if ((d(n), "function" != typeof s[e].playVideo)) {
                                  setTimeout(
                                      function () {
                                          this.playYoutubeVideo(e, i);
                                      }.bind(this),
                                      1e3
                                  );
                                  return;
                              }
                              this.playYoutubeVideo(e, i);
                          }
                      },
                      playYoutubeVideo: function (e, i) {
                          var n = t("#" + e);
                          l(n), "function" == typeof s[e].playVideo && s[e].playVideo(), i || r(e);
                      },
                      stopYoutubeVideo: function (e) {
                          if (theme.config.youTubeReady) {
                              if (e && s[e]) "function" == typeof s[e].pauseVideo && s[e].pauseVideo(), t(window).off("scroll." + e);
                              else for (key in s) this.$container.find("#" + key).length && "function" == typeof s[key].pauseVideo && (s[key].pauseVideo(), t(window).off("scroll." + key));
                          }
                      },
                      playMp4Video: function (e) {
                          var i = t("#" + e);
                          l(i);
                          var a = i[0].play();
                          void 0 !== a &&
                              a
                                  .then(function () {})
                                  .catch(function (t) {
                                      i[0].setAttribute("controls", ""), i.closest(n.videoParent).attr("data-video-style", "unmuted");
                                  });
                      },
                      stopMp4Video: function (e) {
                          if (e) t("#" + e)[0].pause();
                          else
                              for (var i in a)
                                  if (this.$container.find("#" + i).length && "mp4" === a[i].type) {
                                      var n = t("#" + a[i].divId)[0];
                                      n && "function" == typeof n.pause && n.pause();
                                  }
                      },
                      setCurrentVariantAvailability: function (e) {
                          var i = { option1: [], option2: [], option3: [] };
                          this.disableVariantGroup(t(n.formContainer, this.$container).find(".variant-input-wrap"));
                          var a = this.variantsObject.filter(function (t) {
                              return e.id !== t.id && ((e.option2 === t.option2 && e.option3 === t.option3) || (e.option1 === t.option1 && e.option3 === t.option3) || (e.option1 === t.option1 && e.option2 === t.option2) || void 0);
                          });
                          for (var s in (a = Object.assign({}, { variant: e }, a)))
                              if (a.hasOwnProperty(s)) {
                                  var o = a[s],
                                      r = o.option1,
                                      c = o.option2,
                                      d = o.option3;
                                  r && -1 === i.option1.indexOf(r) && i.option1.push(r), c && -1 === i.option2.indexOf(c) && i.option2.push(c), d && -1 === i.option3.indexOf(d) && i.option3.push(d);
                              }
                          i.option1.length && this.enableVariantOptionByValue(i.option1, "option1"),
                              i.option2.length && this.enableVariantOptionByValue(i.option2, "option2"),
                              i.option3.length && this.enableVariantOptionByValue(i.option3, "option3");
                      },
                      updateVariantAvailability: function (e, i, a) {
                          if (i && a)
                              var s = i,
                                  o = a;
                          else
                              var r = t(e.currentTarget),
                                  s = r.val() ? r.val() : e.currentTarget.value,
                                  o = r.data("index");
                          var c = this.variantsObject.filter(function (t) {
                              return t[o] === s;
                          });
                          t(n.formContainer, this.$container)
                              .find(".variant-input-wrap")
                              .each(
                                  function (e, i) {
                                      var n = t(i),
                                          a = n.data("index");
                                      if (a !== o) {
                                          this.disableVariantGroup(n);
                                          for (var s = 0; s < c.length; s++) this.enableVariantOption(n, c[s][a]);
                                      }
                                  }.bind(this)
                              );
                      },
                      disableVariantGroup: function (t) {
                          "dropdown" === this.settings.variantType ? t.find("option").prop("disabled", !0) : (t.find("input").prop("disabled", !0), t.find("label").toggleClass("disabled", !0));
                      },
                      enableVariantOptionByValue: function (e, i) {
                          var a = t(n.formContainer, this.$container).find('.variant-input-wrap[data-index="' + i + '"]');
                          if (t(".all-options p").length > 0) {
                              if ("option1" == i)
                                  for (var s = t(".all-options .sec_prod_first_option").html().trim(), o = s.split(","), r = 0; r < o.length; r++) {
                                      var c = o[r],
                                          d = e.includes(c);
                                      !1 == d && e.push(c);
                                  }
                              else if ("option2" == i)
                                  for (var s = t(".all-options .sec_prod_sec_option").html().trim(), o = s.split(","), r = 0; r < o.length; r++) {
                                      var c = o[r],
                                          d = e.includes(c);
                                      !1 == d && e.push(c);
                                  }
                              else if ("option3" == i)
                                  for (var s = t(".all-options .sec_prod_third_option").html().trim(), o = s.split(","), r = 0; r < o.length; r++) {
                                      var c = o[r],
                                          d = e.includes(c);
                                      !1 == d && e.push(c);
                                  }
                          }
                          for (var r = 0; r < e.length; r++) this.enableVariantOption(a, e[r]);
                      },
                      enableVariantOption: function (t, e) {
                          if (((e = e.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, "\\$1")), "dropdown" === this.settings.variantType)) t.find('option[value="' + e + '"]').prop("disabled", !1);
                          else {
                              var i = t.find('.variant-input[data-value="' + e + '"]');
                              i.find("input").prop("disabled", !1), i.find("label").toggleClass("disabled", !1);
                          }
                      },
                      preImageSetup: function () {
                          this.setImageSizes(), this.initImageSwitch(), this.initImageZoom(), this.customMediaListners(), this.initModelViewerLibraries(), this.initShopifyXrLaunch();
                      },
                      imageSetup: function (e) {
                          if (!this.$thumbSlider.length || t(n.photoThumbs, this.$container).length < 2) {
                              var i = t(n.productImageMain, this.$container).find(n.productVideo);
                              i.length && this.initVideo(i);
                              return;
                          }
                          (this.settings.hasMultipleImages = !0),
                              (this.settings.has3d = this.$container.find(n.media).length),
                              "muted" !== this.settings.videoStyle && theme.videoModal(!0),
                              e
                                  ? theme.utils.promiseStylesheet().then(
                                        function () {
                                            this.createImageCarousels();
                                        }.bind(this)
                                    )
                                  : this.createImageCarousels();
                      },
                      initImageZoom: function () {
                          var e = t(n.imageContainer, this.$container);
                          new theme.Photoswipe(e, this.sectionId);
                      },
                      setImageSizes: function () {
                          if (this.settings.hasImages) {
                              var t = this.$firstProductImage[0].currentSrc;
                              t && (this.settings.imageSize = theme.Images.imageSize(t));
                          }
                      },
                      updateVariantImage: function (e) {
                          var i = e.variant;
                          theme.Images.getSizedImageUrl(i.featured_media.preview_image.src, this.settings.imageSize);
                          var n = t('.product__thumb[data-id="' + i.featured_media.id + '"]'),
                              a = this._slideIndex(n.closest(".product__thumb-item"));
                          void 0 !== a && (!theme.config.bpSmall && this.settings.stackedImages ? this.stackedScrollTo(a) : this.$mainSlider.slick("slickGoTo", a));
                      },
                      initImageSwitch: function () {
                          t(n.photoThumbs, this.$container).length &&
                              t(n.photoThumbs, this.$container)
                                  .on(
                                      "click",
                                      function (e) {
                                          if ((e.preventDefault(), !theme.config.bpSmall && this.settings.stackedImages)) {
                                              var i = t(e.currentTarget).data("index");
                                              this.stackedScrollTo(i);
                                          }
                                      }.bind(this)
                                  )
                                  .on(
                                      "focus",
                                      function (e) {
                                          var a = t(e.currentTarget).data("index");
                                          !theme.config.bpSmall &&
                                              (this.settings.stackedImages
                                                  ? (t(n.photoThumbItem, this.$container).removeClass(i.thumbActive), this.stackedScrollTo(a))
                                                  : this.$mainSlider && this.settings.slickMainInitialized && this.$mainSlider.slick("slickGoTo", a));
                                      }.bind(this)
                                  )
                                  .on(
                                      "keydown",
                                      function (t) {
                                          13 === t.keyCode && this.$container.find(n.currentSlide).focus();
                                      }.bind(this)
                                  );
                      },
                      stackedImagesInit: function () {
                          t(window).off(this.namespaceImages),
                              this.stackedImagePositions(),
                              this.inModal
                                  ? setTimeout(
                                        function () {
                                            this.stackedActive(this.settings.stackedCurrent);
                                        }.bind(this),
                                        1e3
                                    )
                                  : this.stackedActive(this.settings.stackedCurrent),
                              t(window).on("resize" + this.namespaceImages, t.debounce(200, this.stackedImagePositions.bind(this))),
                              t(window).on(
                                  "scroll" + this.namespaceImages,
                                  t.throttle(
                                      200,
                                      function () {
                                          var t = window.scrollY,
                                              e = this.settings.stackedImagePositions.reduce(function (e, i) {
                                                  return Math.abs(i - t) < Math.abs(e - t) ? i : e;
                                              }),
                                              i = this.settings.stackedImagePositions.indexOf(e);
                                          this.settings.stackedCurrent !== i && this.stackedActive(i);
                                      }.bind(this)
                                  )
                              );
                      },
                      stackedImagePositions: function () {
                          var e = [];
                          t(n.photo, this.$container).each(function () {
                              e.push(Math.round(t(this).offset().top));
                          }),
                              (this.settings.stackedImagePositions = e);
                      },
                      stackedScrollTo: function (e) {
                          var i = t(n.photo, this.$container).eq(e).offset().top;
                          t("html, body").animate({ scrollTop: i }, 400, "swing");
                      },
                      stackedActive: function (e) {
                          if ((t(n.photoThumbItem, this.$container).removeClass(i.thumbActive).eq(e).addClass(i.thumbActive), this.settings.hasVideos)) {
                              this.stopVideo();
                              var a = t(n.photo, this.$container).eq(e).find(".product__video");
                              a.length && this.initVideo(a);
                          }
                          if (this.settings.has3d) {
                              this.$container.find(n.media).trigger("mediaHidden");
                              var s = t(n.photo, this.$container).eq(e).find(n.media);
                              s.length && s.trigger("mediaVisible");
                          }
                          this.settings.stackedCurrent = e;
                      },
                      createImageCarousels: function () {
                          var e = this.$mainSlider.find(".starting-slide"),
                              i = this._slideIndex(e);
                          if($("#sliderchecker").hasClass("threeway") && ($(window).width() <= 768) ){
                            this.$mainSlider.off("init"),
                              this.$mainSlider.off("beforeChange"),
                              this.$mainSlider.on("init", this.mainSlideInit.bind(this)),
                              this.$mainSlider.on("beforeChange", this.beforeSlideChange.bind(this)),
                              this.$thumbSlider.on("init", this.thumbSlideInit.bind(this)),
                              (this.mainSliderArgs = { infinite: !this.settings.has3d, arrows: !1, dots: !0, touchThreshold: 10, speed: 300, adaptiveHeight: !0,  variableWidth: true, arrows: !1, dots: !0, centerMode: true, initialSlide: 0, appendDots: this.$container.find(n.dotsContainer) }),
                              (this.thumbSliderArgs = { accessibility: !1, initialSlide: i });
                          }else{
                            this.$mainSlider.off("init"),
                              this.$mainSlider.off("beforeChange"),
                              this.$mainSlider.on("init", this.mainSlideInit.bind(this)),
                              this.$mainSlider.on("beforeChange", this.beforeSlideChange.bind(this)),
                              this.$thumbSlider.on("init", this.thumbSlideInit.bind(this)),
                              (this.mainSliderArgs = { infinite: !this.settings.has3d, arrows: !1, dots: !0, touchThreshold: 10, speed: 300, adaptiveHeight: !0, initialSlide: i, appendDots: this.$container.find(n.dotsContainer) }),
                              (this.thumbSliderArgs = { accessibility: !1, initialSlide: i });                            
                          }
                          var a = this.setSliderArgs();
                          this.initSliders(a),
                              t("body").on(
                                  "matchSmall matchLarge",
                                  function () {
                                      var t = this.setSliderArgs();
                                      this.initSliders(t);
                                  }.bind(this)
                              ),
                              AOS && AOS.refresh();
                      },
                      initSliders: function (t) {
                          this.destroyImageCarousels(),
                              !theme.config.bpSmall && this.settings.stackedImages ? this.stackedImagesInit() : this.$mainSlider.not(".slick-initialized").slick(t.main),
                              theme.config.bpSmall || this.settings.stackedImages || !this.$thumbSlider.length || this.$thumbSlider.not(".slick-initialized").slick(t.thumbs);
                      },
                      setSliderArgs: function () {
                          var e = {},
                              i = "beside" === this.$thumbSlider.data("position");
                          return (
                              theme.config.bpSmall
                                  ? ((e.main = this.mainSliderArgs), (e.thumbs = this.thumbSliderArgs))
                                  : ((e.main = t.extend({}, this.mainSliderArgs, { asNavFor: "#" + this.$thumbSlider.attr("id"), adaptiveHeight: !i, dots: !1, infinite: !1, fade: !0 })),
                                    (e.thumbs = t.extend({}, this.thumbSliderArgs, {
                                        asNavFor: "#" + this.$mainSlider.attr("id"),
                                        slidesToShow: i ? 3 : 5,
                                        slidesToScroll: 1,
                                        arrows: !1,
                                        dots: !1,
                                        vertical: i,
                                        verticalSwiping: i,
                                        focusOnSelect: !0,
                                        infinite: !1,
                                        customHeightMatching: i,
                                        customSlideAdvancement: !0,
                                    }))),
                              e
                          );
                      },
                      destroyImageCarousels: function () {
                          this.$mainSlider && this.settings.slickMainInitialized && (this.$mainSlider.slick("unslick"), (this.settings.slickMainInitialized = !1)),
                              this.$thumbSlider && this.settings.slickThumbInitialized && (this.$thumbSlider.slick("unslick"), (this.settings.slickThumbInitialized = !1)),
                              (this.settings.slickMainInitialized = !1),
                              (this.settings.slickThumbInitialized = !1);
                      },
                      mainSlideInit: function (t, e) {
                          var i = e.$slider.find(n.currentSlide),
                              a = i.find(n.productVideo),
                              s = i.find(n.media);
                          (this.settings.slickMainInitialized = !0), a.length && this.initVideo(a), s.length && this.hideZoomOverlay(!0);
                      },
                      thumbSlideInit: function (t, e) {
                          this.settings.slickThumbInitialized = !0;
                      },
                      beforeSlideChange: function (i, s, o, r) {
                          var c = s.$slider,
                              d = c.find(n.currentSlide),
                              h = c.find('.slick-slide[data-slick-index="' + r + '"]'),
                              u = !1,
                              p = d.find(".product__video");
                          if (o !== r && p.length) {
                              var f = this.getVideoType(p),
                                  m = this.getVideoId(p);
                              m && this.stopVideo(m, f);
                          }
                          var g = h.find(".product__video");
                          if (g.length) {
                              u = !0;
                              var v = this.getVideoType(g),
                                  y = this.getVideoId(g);
                              y &&
                                  "youtube" === v &&
                                  (e
                                      ? a[y] && "muted" === a[y].style && this.requestToPlayYoutubeVideo(y, !0)
                                      : t("body").on(
                                            "youTubeReady" + this.namespace,
                                            function () {
                                                a[y] && "muted" === a[y].style && this.requestToPlayYoutubeVideo(y, !0);
                                            }.bind(this)
                                        )),
                                  y && a[y] && "muted" === a[y].style && "mp4" === v && this.playMp4Video(y),
                                  y && a[y] && "muted" != a[y].style && l(t("#" + y));
                          }
                          h.find(".product-video-trigger").length && (u = !0);
                          var b = d.find(n.media);
                          b.length && b.trigger("mediaHidden");
                          var S = h.find(n.media);
                          S.length && ((u = !0), S.trigger("mediaVisible"), h.find(".shopify-model-viewer-ui__button").attr("tabindex", 0), h.find(".product-single__close-media").attr("tabindex", 0)), this.hideZoomOverlay(u);
                      },
                      hideZoomOverlay: function (e) {
                          e ? t(n.zoomButton, this.$container).addClass(i.hidden) : t(n.zoomButton, this.$container).removeClass(i.hidden);
                      },
                      resizeSlides: function () {
                          this.settings.hasMultipleImages &&
                              (t(window).trigger("resize.slick"),
                              setTimeout(
                                  function () {
                                      this.$mainSlider && this.settings.slickMainInitialized && this.$mainSlider.slick("setPosition"), this.$thumbSlider && this.settings.slickThumbInitialized && this.$thumbSlider.slick("setPosition");
                                  }.bind(this),
                                  500
                              ));
                      },
                      _slideIndex: function (t) {
                          return t.data("index");
                      },
                      openModalProduct: function () {
                          var e = !1;
                          if (this.settings.modalInit) (e = !0), !theme.config.bpSmall && this.settings.stackedImages && this.stackedActive(0);
                          else {
                              var i = this.$formHolder.data("url");
                              this.$formHolder.data("template") || (i += "?view=ajax"),
                                  t.get(
                                      i,
                                      function (e) {
                                          var i = t(e),
                                              n = i.find("#AddToCartForm-" + this.sectionId);
                                          this.replaceModalFormHolder(this.$formHolder, n);
                                          var a = i.find("#ProductSections-" + this.sectionId);
                                          a.length && this.loadProductSections(a);
                                          var s = i.find("#Recommendations-" + this.sectionId);
                                          s.length && this.loadRelatedProducts(s);
                                          var o = i.find(".index-section.social-section");
                                          o.length && this.loadSocialSection(o),
                                              window.SPR && (SPR.initDomEls(), SPR.loadBadges()),
                                              sections.loadSubSections(this.$modal),
                                              document.dispatchEvent(new CustomEvent("quickview:loaded", { detail: { productId: this.sectionId } }));
                                      }.bind(this)
                                  ),
                                  this.preImageSetup(),
                                  this.loadModalContent(),
                                  this.imageSetup(!1),
                                  (this.settings.modalInit = !0);
                          }
                          document.dispatchEvent(new CustomEvent("quickview:open", { detail: { initialized: e, productId: this.sectionId } })), this.resizeSlides();
                      },
                      closeModalProduct: function () {
                          this.stopVideo(), t("body").off(this.namespace), t(window).off(this.namespace);
                      },
                      replaceModalFormHolder: function (t, e) {
                          t.replaceWith(e), this.formSetup(), Shopify.PaymentButton && Shopify.PaymentButton.init();
                      },
                      loadProductSections: function (e) {
                          t("#ProductSectionsHolder-" + this.sectionId).replaceWith(e);
                      },
                      loadRelatedProducts: function (e) {
                          e.find(".screen-layer--product").remove(), t("#ProductRelatedHolder-" + this.sectionId).replaceWith(e);
                      },
                      loadSocialSection: function (e) {
                          t("#SocialSectionHolder-" + this.sectionId).replaceWith(e);
                      },
                      loadModalContent: function () {
                          var e = this.checkIfVideos();
                          e &&
                              e.indexOf("mp4") > -1 &&
                              this.$modal
                                  .find('.product__video[data-video-type="mp4"]')
                                  .find(".product__video-src")
                                  .each(
                                      function (e, i) {
                                          var n = t(i),
                                              a = n.attr("src"),
                                              s = n.attr("type"),
                                              o = document.createElement("source");
                                          (o.src = a), (o.type = s), n.after(o);
                                      }.bind(this)
                                  );
                      },
                      initModelViewerLibraries: function () {
                          var e = t(n.media, this.$container);
                          e.length < 1 || theme.ProductMedia.init(e, this.sectionId);
                      },
                      initShopifyXrLaunch: function () {
                          var e = this;
                          t(document).on("shopify_xr_launch", function () {
                              t(e.selectors.productMediaWrapper + ":not(." + i.hidden + ")", e.$container).trigger("xrLaunch");
                          });
                      },
                      customMediaListners: function () {
                          t(n.closeMedia, this.$container).on(
                              "click",
                              function () {
                                  this.$container.find(n.media).trigger("mediaHidden");
                              }.bind(this)
                          ),
                              this.$container
                                  .find("model-viewer")
                                  .on(
                                      "shopify_model_viewer_ui_toggle_play",
                                      function (t) {
                                          this.mediaLoaded(t);
                                      }.bind(this)
                                  )
                                  .on(
                                      "shopify_model_viewer_ui_toggle_pause",
                                      function (t) {
                                          this.mediaUnloaded(t);
                                      }.bind(this)
                                  );
                      },
                      mediaLoaded: function (t) {
                          this.$container.find(n.closeMedia).removeClass("hide"), this.toggleSliderSwiping(!1);
                      },
                      mediaUnloaded: function (t) {
                          this.$container.find(n.closeMedia).addClass("hide"), this.toggleSliderSwiping(!0);
                      },
                      toggleSliderSwiping: function (t) {
                          this.$mainSlider &&
                              this.settings.slickMainInitialized &&
                              (this.$mainSlider.slick("slickSetOption", "swipe", t),
                              this.$mainSlider.slick("slickSetOption", "draggable", t),
                              this.$mainSlider.slick("slickSetOption", "touchMove", t),
                              this.$mainSlider.slick("slickSetOption", "accessibility", t));
                      },
                      onUnload: function () {
                          for (var e in (this.$container.off(this.namespace),
                          t("body").off(this.namespace),
                          t(window).off(this.namespace).off(this.namespaceImages),
                          this.destroyImageCarousels(),
                          theme.ProductMedia.removeSectionModels(this.sectionId),
                          this.videos))
                              "youtube" === this.videos[e].type && this.videos.hasOwnProperty(e) && s[e] && delete s[e];
                          AOS && AOS.refresh();
                      },
                  })),
                  h
              );
          })()),
          (theme.Recommendations = (function () {
              function e(e) {
                  var i = (this.$container = t(e)),
                      n = (this.sectionId = i.attr("data-section-id"));
                  (this.url = i.data("url")),
                      (this.selectors = { recommendations: "#Recommendations-" + n, placeholder: ".product-recommendations-placeholder", sectionClass: " .product-recommendations", productResults: ".grid-product" }),
                      this.init(),
                      "undefined" != typeof checkShopifyFormatMoney && ($m('<style type="text/css">.badge.badge--sale,span.money{ display: none; }</style>').appendTo("head"), checkShopifyFormatMoney());
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      init: function () {
                          var e = t(this.selectors.recommendations);
                          if (e.length && !1 !== e.data("enable")) {
                              var i = e.find(this.selectors.placeholder),
                                  n = e.data("product-id"),
                                  a = e.data("limit"),
                                  s = this.url + "?section_id=product-recommendations&limit=" + a + "&product_id=" + n;
                              i.load(
                                  s + this.selectors.sectionClass,
                                  function (i) {
                                      theme.reinitProductGridItem(e), 0 === t(i).find(this.selectors.sectionClass).find(this.selectors.productResults).length && e.addClass("hide");
                                  }.bind(this)
                              );
                          }
                      },
                  })),
                  e
              );
          })()),
          (theme.FeaturedCollection = (function () {
              var e = {
                      scrollWrap: "[data-pagination-wrapper]",
                      scrollAnimation: '[data-aos="overflow__animation"]',
                      productContainer: "[data-product-container]",
                      collectionProductContainer: "[data-collection-container]",
                      product: "[data-product-grid]",
                      arrows: "[data-arrow]",
                  },
                  i = { loading: "collection-loading", arrowLeft: "overflow-scroller__arrow--left", disableScrollLeft: "overflow-scroller--disable-left", disableScrollRight: "overflow-scroller--disable-right" };
              function n(i) {
                  (this.$container = t(i)),
                      (this.sectionId = this.$container.attr("data-section-id")),
                      (this.$scrollWrap = t(e.scrollWrap, this.$container)),
                      (this.$scrollArrows = t(e.arrows, this.$container)),
                      (this.namespace = ".featured-collection-" + this.sectionId),
                      (this.options = { scrollable: this.$container.data("scrollable"), paginate: this.$container.data("paginate") });
                  var n = this.$container.data("paginate-by"),
                      a = this.$container.data("collection-count");
                  (this.settings = { url: this.$container.data("collection-url"), page: 1, pageCount: this.options.paginate ? Math.ceil(a / n) : 0, itemsToScroll: 3 }),
                      (this.state = { isInit: !1, loading: !1, scrollerEnabled: !1, loadedAllProducts: !1, scrollable: this.options.scrollable, scrollInterval: null, scrollSpeed: 3 }),
                      (this.sizing = { scroller: 0, itemWidth: 0 }),
                      theme.utils.promiseStylesheet().then(
                          function () {
                              this.checkVisibility(), t(window).on("scroll" + this.namespace, t.debounce(200, this.checkVisibility.bind(this)));
                          }.bind(this)
                      );
              }
              return (
                  (n.prototype = t.extend({}, n.prototype, {
                      checkVisibility: function () {
                          if (this.state.isInit) {
                              0 === this.sizing.scrollSize && this.$scrollWrap.trigger("scroll" + this.namespace), t(window).off("scroll" + this.namespace);
                              return;
                          }
                          theme.isElementVisible(this.$container) && (this.init(), (this.state.isInit = !0));
                      },
                      init: function () {
                          new theme.HoverProductGrid(this.$container),
                              this.state.scrollable &&
                                  ((this.sizing = this.getScrollWidths()),
                                  t(window).on("resize" + this.namespace, t.debounce(200, this.handleResize.bind(this))),
                                  this.toggleScrollListener(this.state.scrollable),
                                  this.arrowListeners(this.state.scrollable));
                      },
                      reInit: function () {
                          new theme.HoverProductGrid(this.$container), this.state.scrollable && ((this.sizing = this.getScrollWidths()), this.toggleScrollListener(this.state.scrollable)), theme.reinitProductGridItem();
                      },
                      loadingState: function (t) {
                          (this.state.loading = t), this.$container.toggleClass(i.loading, t);
                      },
                      getScrollWidths: function () {
                          var t = this.$scrollWrap.width(),
                              e = this.$scrollWrap[0].scrollWidth,
                              i = this.$scrollWrap.find(".grid__item").first().outerWidth();
                          return this.state.isInit || (e -= 200), e <= t && this.disableArrow(null, !0), { scroller: e, scrollSize: e - t, itemWidth: i };
                      },
                      handleResize: function () {
                          this.state.scrollable && (this.sizing = this.getScrollWidths()), this.toggleScrollListener(this.state.scrollable), this.arrowListeners(this.state.scrollable);
                      },
                      toggleScrollListener: function (e) {
                          e
                              ? !this.state.scrollerEnabled && (this.$scrollWrap.on("scroll" + this.namespace, t.throttle(250, this.scrollCheck.bind(this))), (this.state.scrollerEnabled = !0))
                              : (this.$scrollWrap.off("scroll" + this.namespace), (this.state.scrollerEnabled = !1));
                      },
                      scrollCheck: function (t) {
                          if (this.state.loading) {
                              this.toggleScrollListener(!1);
                              return;
                          }
                          0 === this.sizing.scrollSize && (this.sizing = this.getScrollWidths());
                          var e,
                              i = Math.floor(((t.currentTarget.scrollLeft ? t.currentTarget.scrollLeft : 0) / this.sizing.scrollSize) * 100);
                          this.sizing.scrollSize, this.options.paginate && !this.state.loadedAllProducts && i > 50 && this.getNewProducts(), i || (i = 0), this.disableArrow(i);
                      },
                      arrowListeners: function (t) {
                          t
                              ? this.$scrollArrows
                                    .removeClass("hide")
                                    .off(this.namespace)
                                    .on("click" + this.namespace, this.arrowScroll.bind(this))
                              : this.$scrollArrows.addClass("hide").off(this.namespace);
                      },
                      arrowScroll: function (e) {
                          var n = t(e.currentTarget).hasClass(i.arrowLeft) ? "left" : "right",
                              a = theme.config.bpSmall ? 1 : 2;
                          if ("mouseenter" === e.type)
                              this.state.scrollInterval = setInterval(
                                  function () {
                                      var t = this.$scrollWrap.scrollLeft();
                                      this.$scrollWrap.scrollLeft("left" === n ? t - a : t + a);
                                  }.bind(this),
                                  this.state.scrollSpeed
                              );
                          else if ("mouseleave" === e.type) clearInterval(this.state.scrollInterval);
                          else if ("click" === e.type) {
                              clearInterval(this.state.scrollInterval);
                              var s = this.$scrollWrap.scrollLeft(),
                                  o = this.sizing.itemWidth * this.settings.itemsToScroll,
                                  r = "left" === n ? s - o : s + o;
                              this.$scrollWrap.stop().animate({ scrollLeft: r }, 400, "swing");
                          }
                          r <= 0 && this.disableArrow(r);
                      },
                      disableArrow: function (t, e) {
                          if ((this.$scrollArrows.removeClass(i.disableScrollRight).removeClass(i.disableScrollLeft), e)) {
                              this.$scrollArrows.addClass(i.disableScrollRight).addClass(i.disableScrollLeft);
                              return;
                          }
                          if (t <= 0) {
                              this.$scrollArrows.addClass(i.disableScrollLeft);
                              return;
                          }
                          if (t >= 96) {
                              this.$scrollArrows.addClass(i.disableScrollRight);
                              return;
                          }
                      },
                      getNewProducts: function () {
                          this.loadingState(!0);
                          var i = this.settings.page + 1;
                          if (i > this.settings.pageCount) {
                              this.loadingState(!1), (this.state.loadedAllProducts = !0);
                              return;
                          }
                          var n = this.settings.url + "?page=" + i;
                          t.get(
                              n,
                              function (i) {
                                  var n = t(i).find(e.collectionProductContainer + " .grid-product");
                                  t(e.productContainer, this.$container).append(n), this.ajaxSuccess();
                              }.bind(this)
                          );
                      },
                      ajaxSuccess: function () {
                          this.loadingState(!1), (this.settings.page = this.settings.page + 1), this.reInit();
                      },
                      forceReload: function () {
                          this.onUnload(), this.init();
                      },
                      onLoad: function () {
                          theme.QuickShopScreens.reInit(this.$container);
                      },
                      onUnload: function () {
                          t(window).off(this.namespace).trigger("resize"), this.$scrollWrap.off(this.namespace), theme.QuickShopScreens.unload(this.$container);
                      },
                  })),
                  n
              );
          })()),
          (theme.Collection = (function () {
              var e = !1,
                  i = { sortSelect: "#SortBy" },
                  n = { sortBy: "data-default-sortby" };
              function a(i) {
                  (this.container = i),
                      (this.sectionId = t(i).attr("data-section-id")),
                      (this.namespace = ".collection-" + this.sectionId),
                      t(".collection-hero").length ? this.checkIfNeedReload() : theme.settings.overlayHeader && theme.headerNav.disableOverlayHeader(),
                      t(window).on(
                          "popstate",
                          function (t) {
                              if (t) {
                                  if (location.href.indexOf(location.pathname) >= 0) return !0;
                                  theme.CollectionAjaxFilter(location.href).then(function () {
                                      e = !1;
                                  });
                              }
                          }.bind(this)
                      ),
                      this.init();
              }
              return (
                  (a.prototype = t.extend({}, a.prototype, {
                      init: function () {
                          (this.$container = t(this.container)),
                              (this.sectionId = this.$container.attr("data-section-id")),
                              (this.$sortSelect = t(i.sortSelect)),
                              this.$sortSelect.on("change", this.onSortChange.bind(this)),
                              (this.defaultSort = this.getDefaultSortValue()),
                              new theme.HoverProductGrid(this.$container),
                              this.initParams(),
                              this.sortTags();
                      },
                      initParams: function () {
                          if (((this.queryParams = {}), location.search.length))
                              for (var t, e = location.search.substr(1).split("&"), i = 0; i < e.length; i++) (t = e[i].split("=")).length > 1 && (this.queryParams[decodeURIComponent(t[0])] = decodeURIComponent(t[1]));
                      },
                      getSortValue: function () {
                          return this.$sortSelect.val() || this.defaultSort;
                      },
                      getDefaultSortValue: function () {
                          return this.$sortSelect.attr(n.sortBy);
                      },
                      onSortChange: function () {
                          (this.queryParams.sort_by = this.getSortValue()), this.queryParams.page && delete this.queryParams.page, (window.location.search = t.param(this.queryParams));
                      },
                      sortTags: function () {
                          var e = t("#SortTags");
                          e.length &&
                              e.on("change", function () {
                                  location.href = t(this).val();
                              });
                      },
                      checkIfNeedReload: function () {
                          Shopify.designMode && theme.settings.overlayHeader && (t(".header-wrapper").hasClass("header-wrapper--overlay") || location.reload());
                      },
                      forceReload: function () {
                          this.onUnload(), this.init();
                      },
                      onUnload: function () {
                          t(window).off(this.namespace), this.$container.off(this.namespace);
                      },
                  })),
                  a
              );
          })()),
          (theme.CollectionFilter = (function () {
              var e = !1,
                  i = { tags: ".tag a", activeTagList: ".tag-list--active-tags" },
                  n = { activeTag: "tag--active", removeTagParent: "tag--remove" };
              function a(e) {
                  (this.$container = t(e)),
                      (this.sectionId = this.$container.attr("data-section-id")),
                      (this.namespace = ".collection-filter-" + this.sectionId),
                      (this.settings = { combineTags: this.$container.data("combine-tags") }),
                      this.initTagAjax();
              }
              return (
                  (a.prototype = t.extend({}, a.prototype, {
                      initTagAjax: function () {
                          t("body").on(
                              "click",
                              i.tags,
                              function (a) {
                                  var s = t(this);
                                  if (!s.hasClass("no-ajax")) {
                                      if ((a.preventDefault(), !e)) {
                                          e = !0;
                                          var s = t(a.currentTarget),
                                              o = s.parent(),
                                              r = s.attr("href");
                                          this.settings.combineTags
                                              ? o.hasClass(n.activeTag)
                                                  ? o.removeClass(n.activeTag)
                                                  : (o.hasClass(n.removeTagParent) ? o.remove() : t(i.activeTagList).append('<li class="tag tag--remove"><a class="btn btn--small js-no-transition">' + s.text() + "</a></li>"),
                                                    o.addClass(n.activeTag))
                                              : (t(i.tags).parent().removeClass(n.activeTag), o.addClass(n.activeTag)),
                                              history.pushState({}, "", r),
                                              t(".grid-product").addClass("unload"),
                                              theme.CollectionAjaxFilter(r).then(function () {
                                                  e = !1;
                                              });
                                      }
                                  }
                              }.bind(this)
                          );
                      },
                  })),
                  a
              );
          })()),
          (theme.CollectionAjaxFilter = function (e) {
              var i = { filterWrapper: ".collection-filter__wrapper", productsWrapper: "#CollectionAjaxContent" };
              return (
                  (e += "?view=ajax"),
                  t.Deferred(function (n) {
                      t.get(e, function (e) {
                          var a = t(e),
                              s = a.find(i.filterWrapper);
                          t(i.filterWrapper).replaceWith(s);
                          var o = a.find(i.productsWrapper);
                          t(i.productsWrapper).replaceWith(o),
                              sections.reinitSection("collection-template"),
                              theme.QuickShopScreens.reInit(t(i.productsWrapper)),
                              theme.reinitProductGridItem(t(i.productsWrapper)),
                              t(".product-tabs-data").click(function () {
                                  var e = t(this).attr("value");
                                  t(".product-tabs-data").removeClass("tag--active"),
                                      t(this).addClass("tag--active"),
                                      t("div#CollectionAjaxContent .grid__item").hide(),
                                      t("div#CollectionAjaxContent .grid__item").each(function () {
                                          t.trim(t(this).find("span.product__title_color_variants").attr("var-name")).includes(e) && t(this).show();
                                      });
                              }),
                              n.resolve();
                      });
                  })
              );
          }),
          (theme.HeaderSection = (function () {
              function e(e) {
                  var i = (this.$container = t(e));
                  (this.sectionId = i.attr("data-section-id")), this.initDrawers(), theme.headerNav.init(), theme.slideNav.init(), sections.reinitSection("slideshow-section");
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      initDrawers: function () {
                          t(document.body).hasClass("template-cart") ? new theme.AjaxCart("CartPage") : "drawer" === theme.settings.cartType && new theme.AjaxCart("CartDrawer");
                      },
                      onUnload: function () {
                          theme.headerNav.unload(), theme.slideNav.unload();
                      },
                  })),
                  e
              );
          })()),
          (theme.FooterSection = (function () {
              var e = { disclosureLocale: "[data-disclosure-locale]", disclosureCurrency: "[data-disclosure-currency]" };
              function i(e) {
                  (this.$container = t(e)),
                      (this.cache = {}),
                      this.cacheSelectors(),
                      this.cache.$localeDisclosure.length && (this.localeDisclosure = new theme.Disclosure(this.cache.$localeDisclosure)),
                      this.cache.$currencyDisclosure.length && (this.currencyDisclosure = new theme.Disclosure(this.cache.$currencyDisclosure));
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      cacheSelectors: function () {
                          this.cache = { $localeDisclosure: this.$container.find(e.disclosureLocale), $currencyDisclosure: this.$container.find(e.disclosureCurrency) };
                      },
                      onUnload: function () {
                          this.cache.$localeDisclosure.length && this.localeDisclosure.unload(), this.cache.$currencyDisclosure.length && this.currencyDisclosure.unload();
                      },
                  })),
                  i
              );
          })()),
          (theme.FeaturedContentSection = function e() {
              t(".rte").find("a:not(:has(img))").addClass("text-link");
          }),
          (theme.slideshows = {}),
          (theme.SlideshowSection = (function () {
              function e(e) {
                  var i = (this.$container = t(e));
                  i.parent();
                  var n = i.attr("data-section-id");
                  this.slideshow = "#Slideshow-" + n;
                  var a = t(e).find(".hero");
                  a.length && theme.loadImageSection(a), this.init();
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      init: function () {
                          var e = { arrows: t(this.slideshow).data("arrows"), dots: t(this.slideshow).data("dots"), pauseOnHover: !0 };
                          theme.slideshows[this.slideshow] = new theme.Slideshow(this.slideshow, e);
                      },
                      forceReload: function () {
                          this.onUnload(), this.init();
                      },
                      onUnload: function () {
                          theme.slideshows[this.slideshow].destroy(), delete theme.slideshows[this.slideshow];
                      },
                      onSelect: function () {
                          t(this.slideshow).slick("slickPause");
                      },
                      onDeselect: function () {
                          t(this.slideshow).slick("slickPlay");
                      },
                      onBlockSelect: function (e) {
                          var i = t(this.slideshow),
                              n = t(".slideshow__slide--" + e.detail.blockId + ":not(.slick-cloned)").data("slick-index");
                          i.slick("slickGoTo", n).slick("slickPause");
                      },
                      onBlockDeselect: function () {
                          t(this.slideshow).slick("slickPlay");
                      },
                  })),
                  e
              );
          })()),
          (theme.HeroAnimated = (function () {
              var e = { active: "animated__slide--active", inactive: "animated__slide--inactive" };
              function i(e) {
                  var i = (this.$container = t(e));
                  i.parent();
                  var n = i.attr("data-section-id"),
                      a = i.data("count"),
                      s = ".hero-animated-" + n,
                      o = t(e).find(".hero");
                  if ((o.length && theme.loadImageSection(o), (this.$allImages = i.find(".animated__slide")), (this.state = { active: !1, activeIndex: 0 }), 1 === a)) {
                      this.setFades(!0);
                      return;
                  }
                  this.interval,
                      (this.intervalSpeed = i.data("interval")),
                      (this.maxIndex = a - 1),
                      theme.utils.promiseStylesheet().then(
                          function () {
                              this.checkVisibility(), t(window).on("scroll" + s, t.throttle(300, this.checkVisibility.bind(this)));
                          }.bind(this)
                      );
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      checkVisibility: function () {
                          if (!theme.isElementVisible(this.$container)) {
                              (this.state.active = !1), clearInterval(this.interval);
                              return;
                          }
                          !this.state.active && this.initInterval();
                      },
                      initInterval: function () {
                          (this.state.active = !0),
                              this.setFades(!0),
                              (this.interval = setInterval(
                                  function () {
                                      this.setFades();
                                  }.bind(this),
                                  this.intervalSpeed
                              ));
                      },
                      setFades: function (t) {
                          var i = this.state.activeIndex === this.maxIndex ? 0 : this.state.activeIndex + 1;
                          t && (i = this.state.activeIndex),
                              t || this.$allImages.eq(this.state.activeIndex).removeClass(e.active).addClass(e.inactive),
                              this.$allImages.eq(i).removeClass(e.inactive).addClass(e.active),
                              (this.state.activeIndex = i);
                      },
                      onUnload: function () {
                          clearInterval(this.interval);
                      },
                  })),
                  i
              );
          })()),
          (theme.VideoSection = (function () {
              var e,
                  i = [],
                  n = [],
                  a = {
                      width: 1280,
                      height: 720,
                      playerVars: { autohide: 0, branding: 0, cc_load_policy: 0, controls: 0, fs: 0, iv_load_policy: 3, modestbranding: 1, playsinline: 1, quality: "hd720", rel: 0, showinfo: 0, wmode: "opaque" },
                  },
                  s = !1,
                  o = { byline: !1, title: !1, portrait: !1, loop: !0 },
                  r = { videoParent: ".video-parent-section" },
                  c = { loading: "loading", loaded: "loaded", interactable: "video-interactable" };
              function d(e) {
                  var i = (this.$container = t(e));
                  this.sectionId = i.attr("data-section-id");
                  var n = (this.youtubePlayerId = "YouTubeVideo-" + this.sectionId);
                  this.namespace = "." + n;
                  var a = (this.vimeoPlayerId = "Vimeo-" + this.sectionId);
                  this.$vimeoTrigger = t("#VimeoTrigger-" + this.sectionId);
                  var s,
                      o = "Mp4Video-" + this.sectionId,
                      r = t("#" + n),
                      c = t("#" + a),
                      d = t("#" + o);
                  (this.vimeoPlayer = []),
                      r.length && ((this.youtubeVideoId = r.data("video-id")), this.initYoutubeVideo()),
                      c.length && ((this.vimeoVideoId = c.data("video-id")), this.initVimeoVideo()),
                      d.length &&
                          ((s = o), document.querySelector("#" + s).play())
                              .then(function () {
                                  u(d);
                              })
                              .catch(function (t) {
                                  d.attr("controls", ""), u(d), p(d);
                              });
              }
              function l(e) {
                  var i, a, s;
                  if (e) {
                      if ("string" == typeof e) i = e;
                      else {
                          if (!e || !e.data) return;
                          i = e.data.id;
                      }
                      theme.isElementVisible(t("#" + i)) ? ((a = i), n[a] && "function" == typeof n[a].playVideo && n[a].playVideo()) : ((s = i), n[s] && "function" == typeof n[s].pauseVideo && n[s].pauseVideo());
                  }
              }
              function h(t) {
                  t.closest(r.videoParent).addClass(c.loading);
              }
              function u(t) {
                  t.closest(r.videoParent).removeClass(c.loading).addClass(c.loaded);
              }
              function p(t) {
                  t.closest(r.videoParent).addClass(c.interactable);
              }
              return (
                  (d.prototype = t.extend({}, d.prototype, {
                      initYoutubeVideo: function () {
                          (i[this.youtubePlayerId] = {
                              id: this.youtubePlayerId,
                              videoId: this.youtubeVideoId,
                              type: "youtube",
                              attemptedToPlay: !1,
                              events: {
                                  onReady: function (e) {
                                      var i, a, s, o;
                                      (i = e),
                                          (n[(o = (s = t("#" + (a = this.youtubePlayerId))).attr("id"))] = i.target),
                                          n[o],
                                          h(s),
                                          n[o].mute(),
                                          s.attr("tabindex", "-1"),
                                          theme.utils.promiseStylesheet().then(function () {
                                              l(o), t(window).on("scroll." + o, { id: o }, t.throttle(150, l));
                                          });
                                  }.bind(this),
                                  onStateChange: function (e) {
                                      !(function e(a, s) {
                                          var o = t("#" + s),
                                              r = o.attr("id"),
                                              c = n[r];
                                          switch (a.data) {
                                              case -1:
                                                  i[r].attemptedToPlay && (u(o), p(o));
                                                  break;
                                              case 0:
                                                  c.playVideo();
                                                  break;
                                              case 1:
                                                  u(o);
                                                  break;
                                              case 3:
                                                  i[r].attemptedToPlay = !0;
                                          }
                                      })(e, this.youtubePlayerId);
                                  }.bind(this),
                              },
                          }),
                              e ? this.loadYoutubeVideo() : (theme.LibraryLoader.load("youtubeSdk"), t("body").on("youTubeReady" + this.namespace, this.loadYoutubeVideo.bind(this)));
                      },
                      loadYoutubeVideo: function () {
                          var s = t.extend({}, a, i[this.youtubePlayerId]);
                          (s.playerVars.controls = 0), (n[this.youtubePlayerId] = new YT.Player(this.youtubePlayerId, s)), (e = !0);
                      },
                      initVimeoVideo: function () {
                          i[this.vimeoPlayerId] = { divId: this.vimeoPlayerId, id: this.vimeoVideoId, type: "vimeo" };
                          var e = t("#" + this.vimeoPlayerId);
                          h(e),
                              this.$vimeoTrigger.on(
                                  "click",
                                  +this.namespace,
                                  function (t) {
                                      this.requestToPlayVimeoVideo(this.vimeoPlayerId);
                                  }.bind(this)
                              ),
                              s ? this.loadVimeoVideo() : (window.loadVimeo(), t("body").on("vimeoReady" + this.namespace, this.loadVimeoVideo.bind(this)));
                      },
                      loadVimeoVideo: function () {
                          var e = t.extend({}, o, i[this.vimeoPlayerId]);
                          if (((this.vimeoPlayer[this.vimeoPlayerId] = new Vimeo.Player(i[this.vimeoPlayerId].divId, e)), (s = !0), theme.config.bpSmall)) {
                              var n = t("#" + this.vimeoPlayerId);
                              u(n);
                          } else this.requestToPlayVimeoVideo(this.vimeoPlayerId);
                      },
                      requestToPlayVimeoVideo: function (e) {
                          if (!s) {
                              t("body").on(
                                  "vimeoReady" + this.namespace,
                                  function () {
                                      this.playVimeoVideo(e);
                                  }.bind(this)
                              );
                              return;
                          }
                          this.playVimeoVideo(e);
                      },
                      playVimeoVideo: function (e) {
                          this.vimeoPlayer[e].play(), this.vimeoPlayer[e].setVolume(0);
                          var i = t("#" + e);
                          u(i);
                      },
                      onUnload: function (e) {
                          var i = "YouTubeVideo-" + e.target.id.replace("shopify-section-", "");
                          n[i] && n[i].destroy(), t(window).off("scroll" + this.namespace), t("body").off("vimeoReady" + this.namespace);
                      },
                  })),
                  d
              );
          })()),
          (theme.Testimonials = (function () {
              var e = 0,
                  i = { accessibility: !0, arrows: !1, dots: !0, autoplay: !1, touchThreshold: 20, slidesToShow: 3, slidesToScroll: 3 };
              function n(n) {
                  var a = (this.$container = t(n)).attr("data-section-id");
                  this.wrapper = ".testimonials-wrapper";
                  var s = t((this.slider = "#Testimonials-" + a));
                  this.sliderActive = !1;
                  var o = t.extend({}, i, { slidesToShow: 1, slidesToScroll: 1, adaptiveHeight: !0 });
                  (e = s.data("count")) < i.slidesToShow && ((i.slidesToShow = e), (i.slidesToScroll = e)),
                      s.on("init", this.a11y.bind(this)),
                      theme.config.bpSmall ? this.init(s, o) : this.init(s, i),
                      t("body").on(
                          "matchSmall",
                          function () {
                              this.init(s, o);
                          }.bind(this)
                      ),
                      t("body").on(
                          "matchLarge",
                          function () {
                              this.init(s, i);
                          }.bind(this)
                      );
              }
              return (
                  (n.prototype = t.extend({}, n.prototype, {
                      onUnload: function () {
                          t(this.slider, this.wrapper).slick("unslick");
                      },
                      onBlockSelect: function (e) {
                          var i = t(".testimonials-slide--" + e.detail.blockId + ":not(.slick-cloned)").data("slick-index");
                          t(this.slider, this.wrapper).slick("slickGoTo", i);
                      },
                      init: function (t, e) {
                          this.sliderActive && (t.slick("unslick"), (this.sliderActive = !1)), t.slick(e), (this.sliderActive = !0), AOS && AOS.refresh();
                      },
                      a11y: function (e, i) {
                          var n = i.$list,
                              a = t(this.wrapper, this.$container);
                          n.removeAttr("aria-live"),
                              a.on("focusin", function (t) {
                                  a.has(t.target).length && n.attr("aria-live", "polite");
                              }),
                              a.on("focusout", function (t) {
                                  a.has(t.target).length && n.removeAttr("aria-live");
                              });
                      },
                  })),
                  n
              );
          })()),
          (theme.NewsletterPopup = (function () {
              function e(e) {
                  var i = (this.$container = t(e)),
                      n = i.attr("data-section-id");
                  if (((this.cookieName = "newsletter-" + n), i.length && "/challenge" !== window.location.pathname)) {
                      if (
                          ((this.data = { secondsBeforeShow: i.data("delay-seconds"), daysBeforeReappear: i.data("delay-days"), cookie: Cookies.get(this.cookieName), testMode: i.data("test-mode") }),
                          (this.modal = new theme.Modals("NewsletterPopup-" + n, "newsletter-popup-modal")),
                          (i.find(".errors").length || i.find(".note--success").length) && this.modal.open(),
                          i.find(".note--success").length)
                      ) {
                          this.closePopup(!0);
                          return;
                      }
                      t("body").on("modalClose." + i.attr("id"), this.closePopup.bind(this)), (!this.data.cookie || this.data.testMode) && this.initPopupDelay();
                  }
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      initPopupDelay: function () {
                          setTimeout(
                              function () {
                                  this.modal.open();
                              }.bind(this),
                              1e3 * this.data.secondsBeforeShow
                          );
                      },
                      closePopup: function (t) {
                          if (this.data.testMode) {
                              Cookies.remove(this.cookieName, { path: "/" });
                              return;
                          }
                          var e = t ? 200 : this.data.daysBeforeReappear;
                          Cookies.set(this.cookieName, "opened", { path: "/", expires: e });
                      },
                      onLoad: function () {
                          this.modal.open();
                      },
                      onSelect: function () {
                          this.modal.open();
                      },
                      onDeselect: function () {
                          this.modal.close();
                      },
                      onUnload: function () {},
                  })),
                  e
              );
          })()),
          (theme.Maps = (function () {
              var e = { zoom: 14 },
                  i = null,
                  n = [],
                  a = { addressNoResults: theme.strings.addressNoResults, addressQueryLimit: theme.strings.addressQueryLimit, addressError: theme.strings.addressError, authError: theme.strings.authError },
                  s = { section: '[data-section-type="map"]', map: "[data-map]", mapOverlay: "[data-map-overlay]" },
                  o = { mapError: "map-section--load-error", errorMsg: "map-section__error errors text-center" };
              function r(e) {
                  (this.$container = t(e)),
                      (this.sectionId = this.$container.attr("data-section-id")),
                      (this.namespace = ".map-" + this.sectionId),
                      (this.$map = this.$container.find(s.map)),
                      (this.key = this.$map.data("api-key")),
                      this.key && (this.checkVisibility(), t(window).on("scroll" + this.namespace, t.throttle(50, this.checkVisibility.bind(this))));
              }
              return (
                  (window.gm_authFailure = function () {
                      Shopify.designMode && (t(s.section).addClass(o.mapError), t(s.map).remove(), t(s.mapOverlay).after('<div class="' + o.errorMsg + '">' + theme.strings.authError + "</div>"));
                  }),
                  (r.prototype = t.extend({}, r.prototype, {
                      prepMapApi: function () {
                          "loaded" === i
                              ? this.createMap()
                              : (n.push(this),
                                "loading" !== i &&
                                    ((i = "loading"),
                                    (void 0 === window.google || void 0 === window.google.maps) &&
                                        t.getScript("https://maps.googleapis.com/maps/api/js?key=" + this.key).then(function () {
                                            (i = "loaded"),
                                                t.each(n, function (t, e) {
                                                    e.createMap();
                                                });
                                        })));
                      },
                      createMap: function () {
                          var i,
                              n,
                              s,
                              r,
                              c = this.$map;
                          return ((i = c),
                          (n = t.Deferred()),
                          (s = new google.maps.Geocoder()),
                          (r = i.data("address-setting")),
                          s.geocode({ address: r }, function (t, e) {
                              e !== google.maps.GeocoderStatus.OK && n.reject(e), n.resolve(t);
                          }),
                          n)
                              .then(
                                  function (i) {
                                      var n = { zoom: e.zoom, backgroundColor: "none", center: i[0].geometry.location, draggable: !1, clickableIcons: !1, scrollwheel: !1, disableDoubleClickZoom: !0, disableDefaultUI: !0 },
                                          a = (this.map = new google.maps.Map(c[0], n)),
                                          s = (this.center = a.getCenter());
                                      new google.maps.Marker({ map: a, position: a.getCenter() }),
                                          google.maps.event.addDomListener(
                                              window,
                                              "resize",
                                              t.debounce(250, function () {
                                                  google.maps.event.trigger(a, "resize"), a.setCenter(s), c.removeAttr("style");
                                              })
                                          );
                                  }.bind(this)
                              )
                              .fail(function () {
                                  var t;
                                  switch (status) {
                                      case "ZERO_RESULTS":
                                          t = a.addressNoResults;
                                          break;
                                      case "OVER_QUERY_LIMIT":
                                          t = a.addressQueryLimit;
                                          break;
                                      case "REQUEST_DENIED":
                                          t = a.authError;
                                          break;
                                      default:
                                          t = a.addressError;
                                  }
                                  Shopify.designMode &&
                                      c
                                          .parent()
                                          .addClass(o.mapError)
                                          .html('<div class="' + o.errorMsg + '">' + t + "</div>");
                              });
                      },
                      checkVisibility: function () {
                          theme.isElementVisible(this.$container, 600) && (this.prepMapApi(), t(window).off(this.namespace));
                      },
                      onUnload: function () {
                          0 !== this.$map.length && google.maps.event.clearListeners(this.map, "resize");
                      },
                  })),
                  r
              );
          })()),
          (theme.Blog = (function () {
              function e(t) {
                  this.tagFilters();
              }
              return (
                  (e.prototype = t.extend({}, e.prototype, {
                      tagFilters: function () {
                          var e = t("#BlogTagFilter");
                          e.length &&
                              e.on("change", function () {
                                  location.href = t(this).val();
                              });
                      },
                      onUnload: function () {},
                  })),
                  e
              );
          })()),
          (theme.Photoswipe = (function () {
              var e = { trigger: ".product__photo-zoom", images: ".photoswipe__image", activeImage: ".slick-active .photoswipe__image" };
              function i(t, e) {
                  (this.$container = t),
                      (this.sectionId = e),
                      (this.namespace = ".photoswipe-" + this.sectionId),
                      this.gallery,
                      this.$images,
                      (this.inSlideshow = !1),
                      "false" !== t.attr("data-zoom") && ("true" === t.attr("data-has-slideshow") && (this.inSlideshow = !0), this.init());
              }
              return (
                  (i.prototype = t.extend({}, i.prototype, {
                      init: function () {
                          var i = this.$container.find(e.trigger);
                          this.$images = this.$container.find(e.images);
                          var n = [];
                          i.on(
                              "click" + this.namespace,
                              function (i) {
                                  if (((n = this.getImageData()), this.inSlideshow || theme.config.bpSmall)) var a = this.$container.find(e.activeImage).data("index");
                                  else var a = t(i.currentTarget).data("index");
                                  this.initGallery(n, a);
                              }.bind(this)
                          );
                      },
                      getImageData: function () {
                          var e = [];
                          return (
                              this.$images.each(function () {
                                  var i = {
                                      msrc: t(this).prop("currentSrc") || t(this).prop("src"),
                                      src: t(this).data("photoswipe-src"),
                                      w: t(this).data("photoswipe-width"),
                                      h: t(this).data("photoswipe-height"),
                                      el: t(this)[0],
                                      initialZoomLevel: 0.5,
                                  };
                                  e.push(i);
                              }),
                              e
                          );
                      },
                      initGallery: function (t, e) {
                          var i = document.querySelectorAll(".pswp")[0];
                          (this.gallery = new PhotoSwipe(i, PhotoSwipeUI_Default, t, {
                              allowPanToNext: !1,
                              captionEl: !1,
                              closeOnScroll: !1,
                              counterEl: !1,
                              history: !1,
                              index: e - 1,
                              pinchToClose: !1,
                              preloaderEl: !1,
                              scaleMode: "zoom",
                              shareEl: !1,
                              tapToToggleControls: !1,
                              getThumbBoundsFn: function (e) {
                                  var i = window.pageYOffset || document.documentElement.scrollTop,
                                      n = t[e].el.getBoundingClientRect();
                                  return { x: n.left, y: n.top + i, w: n.width };
                              },
                          })),
                              this.gallery.init(),
                              this.gallery.listen("afterChange", this.afterChange.bind(this));
                      },
                      afterChange: function () {
                          if (this.inSlideshow) {
                              var e = t("#ProductPhotos-" + this.sectionId);
                              if (e.hasClass("slick-initialized")) {
                                  var i = this.gallery.getCurrentIndex();
                                  e.slick("slickGoTo", i);
                              }
                          }
                      },
                  })),
                  i
              );
          })()),
          (theme.bp = {}),
          (theme.bp.smallUp = 769),
          (theme.bp.small = theme.bp.smallUp - 1),
          (theme.config = {
              cssLoaded: !1,
              bpSmall: !1,
              hasSessionStorage: !0,
              mediaQuerySmall: "screen and (max-width: " + theme.bp.small + "px)",
              mediaQuerySmallUp: "screen and (min-width: " + theme.bp.smallUp + "px)",
              youTubeReady: !1,
              vimeoReady: !1,
              vimeoLoading: !1,
              isSafari: !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/),
              isTouch: !!("ontouchstart" in window || (window.DocumentTouch && window.document instanceof DocumentTouch)) || !!window.navigator.maxTouchPoints || !!window.navigator.msMaxTouchPoints,
          }),
          (window.onYouTubeIframeAPIReady = function () {
              (theme.config.youTubeReady = !0), t("body").trigger("youTubeReady");
          }),
          (window.loadVimeo = function () {
              if (!theme.config.vimeoLoading && !theme.config.vimeoReady) {
                  theme.config.vimeoLoading = !0;
                  var e = document.createElement("script");
                  e.src = "https://player.vimeo.com/api/player.js";
                  var i,
                      n,
                      a,
                      s = document.getElementsByTagName("script")[0];
                  s.parentNode.insertBefore(e, s),
                      ((a = t.Deferred()),
                      (i = setInterval(function () {
                          Vimeo && (clearInterval(i), clearTimeout(n), a.resolve());
                      }, 500)),
                      (n = setTimeout(function () {
                          clearInterval(i), a.reject();
                      }, 4e3)),
                      a)
                          .then(function () {
                              (theme.config.vimeoReady = !0), (theme.config.vimeoLoading = !1), t("body").trigger("vimeoReady");
                          })
                          .fail(function () {});
              }
          }),
          (theme.init = function () {
              theme.setGlobals(),
                  theme.pageTransitions(),
                  theme.QuickShopScreens.init(),
                  theme.articleImages.init(),
                  theme.collapsibles.init(),
                  "sticky" === theme.settings.cartType && new theme.StickyCart.init(),
                  theme.customerTemplates.init(),
                  theme.videoModal(),
                  theme.rte.init(),
                  t(document.documentElement).on("keyup.tab", function (e) {
                      9 === e.keyCode && (t(document.documentElement).addClass("tab-outline"), t(document.documentElement).off("keyup.tab"));
                  }),
                  window.addEventListener("pageshow", function (t) {
                      t.persisted && theme.refreshCart();
                  }),
                  performance && 2 === performance.navigation.type && theme.refreshCart();
          }),
          (theme.refreshCart = function () {
              "sticky" === theme.settings.cartType &&
                  theme.StickyCart &&
                  t.getJSON("/cart.js").then(function (t) {
                      theme.StickyCart.refresh(t);
                  });
          }),
          (theme.setGlobals = function () {
              (theme.config.hasSessionStorage = theme.isSessionStorageSupported()),
                  theme.config.isTouch && t("body").addClass("supports-touch"),
                  enquire.register(theme.config.mediaQuerySmall, {
                      match: function () {
                          (theme.config.bpSmall = !0), t("body").trigger("matchSmall");
                      },
                      unmatch: function () {
                          (theme.config.bpSmall = !1), t("body").trigger("unmatchSmall");
                      },
                  }),
                  enquire.register(theme.config.mediaQuerySmallUp, {
                      match: function () {
                          t("body").trigger("matchLarge");
                      },
                      unmatch: function () {
                          t("body").trigger("unmatchLarge");
                      },
                  });
          }),
          (theme.loadImageSection = function (t) {
              function e() {
                  t.removeClass("loading").addClass("loaded");
              }
              function i() {
                  return t.find(".lazyloaded").length;
              }
              if (t.find("svg").length || i() > 0) {
                  e();
                  return;
              }
              var n = setInterval(function () {
                  i() > 0 && (clearInterval(n), e());
              }, 80);
          }),
          (theme.isSessionStorageSupported = function () {
              if (window.self !== window.top) return !1;
              var t = "test",
                  e = window.sessionStorage;
              try {
                  return e.setItem(t, "1"), e.removeItem(t), !0;
              } catch (i) {
                  return !1;
              }
          }),
          (theme.isElementVisible = function (t, e) {
              var i = t[0].getBoundingClientRect(),
                  n = window.innerHeight || document.documentElement.clientHeight;
              return (e = e || 0), i.bottom >= 0 - e / 1.5 && i.right >= 0 && i.top <= n + e && i.left <= (window.innerWidth || document.documentElement.clientWidth);
          }),
          (theme.pageTransitions = function () {
              !0 == t("body").data("transitions") &&
                  (theme.config.isSafari &&
                      t("a").on("click", function () {
                          window.setTimeout(function () {
                              t("body").removeClass("unloading");
                          }, 1200);
                      }),
                  t('a[href^="mailto:"], a[href^="#"], a[target="_blank"], a[href*="youtube.com/watch"], a[href*="youtu.be/"]').each(function () {
                      t(this).addClass("js-no-transition");
                  }),
                  t("a:not(.js-no-transition)").on("click", function (e) {
                      if (e.metaKey) return !0;
                      var i = t(this).attr("href");
                      if (i.indexOf(location.pathname) >= 0 && i.indexOf("#") >= 0) return !0;
                      e.preventDefault(),
                          t("body").addClass("unloading"),
                          window.setTimeout(function () {
                              location.href = i;
                          }, 50);
                  }));
          }),
          (window.onpageshow = function (e) {
              e.persisted && t("body").removeClass("unloading"), (event.persisted || (void 0 !== window.performance && window.performance.navigation && 2 === window.performance.navigation.type)) && theme.resetScrollPosition();
          }),
          (theme.initSecondary = function () {
              document.body.classList.add("js-animate"),
                  AOS.init({ easing: "ease-out-quad", once: !1, mirror: !0, offset: 100, disableMutationObserver: !0 }),
                  document.addEventListener("lazyloaded", function (e) {
                      var i = t(e.target);
                      i.length && i.parent().addClass("loaded");
                  }),
                  document.dispatchEvent(new CustomEvent("page:loaded")),
                  theme.storeScrollPositionOnUnload(),
                  theme.reviewAppLinkListener(),
                  theme.checkForAnchorLink();
          }),
          (theme.storeScrollPositionOnUnload = function () {
              if (theme.config.hasSessionStorage) {
                  var e = theme.config.isSafari ? "pagehide" : "beforeunload";
                  window.addEventListener(e, function (e) {
                      var i = t(document).scrollTop();
                      sessionStorage.setItem("scrollPosition_" + document.location.pathname, i.toString());
                  });
              }
          }),
          (theme.resetScrollPosition = function () {
              if (theme.config.hasSessionStorage) {
                  var e = document.location.pathname;
                  sessionStorage["scrollPosition_" + e] && t(document).scrollTop(sessionStorage.getItem("scrollPosition_" + e));
              }
          }),
          (theme.reviewAppLinkListener = function () {
              t("body").on("click", ".spr-pagination", function () {
                  t(this).closest(".spr-reviews").scrollLeft(0);
              });
          }),
          (theme.checkForAnchorLink = function () {
              if (window.location.hash) {
                  var e = t(window.location.hash);
                  if (e.length) {
                      var i = e.offset().top - 100;
                      i > 0 && window.scroll(0, i);
                  }
              }
          }),
          (theme.reinitProductGridItem = function () {
              AOS && AOS.refreshHard(), window.SPR && (SPR.initDomEls(), SPR.loadBadges()), theme.collapsibles.init();
          }),
          t(document).ready(function () {
              theme.init(),
                  theme.utils.promiseStylesheet().then(function () {
                      theme.initSecondary();
                  }),
                  (window.sections = new theme.Sections()),
                  sections.register("header-section", theme.HeaderSection),
                  sections.register("slideshow-section", theme.SlideshowSection),
                  sections.register("hero-animated", theme.HeroAnimated),
                  sections.register("video-section", theme.VideoSection),
                  sections.register("product", theme.Product),
                  sections.register("product-recommendations", theme.Recommendations),
                  sections.register("product-template", theme.Product),
                  sections.register("featured-collection", theme.FeaturedCollection),
                  sections.register("collection-template", theme.Collection),
                  sections.register("collection-filter", theme.CollectionFilter),
                  sections.register("featured-content-section", theme.FeaturedContentSection),
                  sections.register("testimonials", theme.Testimonials),
                  sections.register("newsletter-popup", theme.NewsletterPopup),
                  sections.register("map", theme.Maps),
                  sections.register("blog", theme.Blog),
                  sections.register("footer-section", theme.FooterSection);
          });
  })(theme.jQuery),
  $(document).ready(function () {
      $(document).on("click", ".site-footer .accordion_heading .main_heading", function () {
          $(this).parents(".accordion_heading").find(".accordion_subheading").slideToggle(), $(this).parents(".accordion_heading").find(".plus").toggle(), $(this).parents(".accordion_heading").find(".minus").toggle();
      }),
          $(".plus_icon").click(function () {
              var t = $(this).parent().find(".cart__quantity").val(),
                  e = parseInt(t) + 1;
              $(this).parent().find(".cart__quantity").val(e);
              var i = $(this).parent().find(".cart__quantity").attr("data-index");
              jQuery.post("/cart/change.js", { quantity: e, line: i }).done(function () {
                  window.location.href = "/cart";
              });
          }),
          $(".minus_icon").click(function () {
              var t = $(this).parent().find(".cart__quantity").val(),
                  e = parseInt(t) - 1;
              $(this).parent().find(".cart__quantity").val(e);
              var i = $(this).parent().find(".cart__quantity").attr("data-index");
              jQuery.post("/cart/change.js", { quantity: e, line: i }).done(function () {
                  window.location.href = "/cart";
              });
          }),
          $(document).on("click", ".custom_remove_btn", function (t) {
              $(".drawer__inner").addClass("overlay-applied"), $(this).parent().find(".cart__quantity").val();
              var e = $(this).attr("data-index");
              jQuery.post("/cart/change.js", { quantity: 0, line: e }).done(function () {
                  cart_update();
              });
          }),
          $(".main_country").click(function () {
              $(".popups_country").addClass("show-overlay-country");
          }),
          $(".country-redirect").click(function () {
              var t = $(".redirect-country-url").val();
              window.location.href = t;
          }),
          (function (t) {
              [].slice.call(t.querySelectorAll(".bar-inner")).map(function (t, e) {
                  setTimeout(function () {
                      t.style.width = t.dataset.percent;
                  }, 1e3 * e);
              });
          })(document);
  }),
  $(document).on("keydown", function (t) {
      27 === t.keyCode && $("div#country-overlay").removeClass("show-overlay-country");
  }),
  $(document).on("click", ".cart-inner .Custom_cart__quantity_icon", function (t) {
      t.preventDefault();
      var e = $(this).parent().find(".cart__quantity").val();
      if ($(this).hasClass("minus_icon1")) var i = parseInt(e) - 1;
      else var i = parseInt(e) + 1;
      var n = $(this).parent().find(".cart__quantity").attr("data-property"),
          a = i;
      (jsonobj = []),
          $(".cart-inner .Custom_cart__quantity.cart__quantity").each(function () {
              var t = $(this).attr("data-property"),
                  i = parseInt($(this).attr("data-base")),
                  s = $(this).val();
              n == t ? (e == s ? jsonobj.push(a) : jsonobj.push(a * i)) : jsonobj.push(parseInt(s));
          }),
          jQuery.post("/cart/update.js", { updates: jsonobj }).done(function () {
              window.location.href = "/cart";
          });
  }),
  $(document).on("click", ".drawer__inner .Custom_cart__quantity_icon", function (t) {
      t.preventDefault(), $(".drawer__inner").addClass("overlay-applied");
      var e = $(this).parent().find(".cart__quantity").val();
      if ($(this).hasClass("minus_icon1")) var i = parseInt(e) - 1;
      else var i = parseInt(e) + 1;
      var n = $(this).parent().find(".cart__quantity").attr("data-property"),
          a = i;
      (jsonobj = []),
          $(".drawer__inner .Custom_cart__quantity.cart__quantity").each(function () {
              var t = $(this).attr("data-property"),
                  i = parseInt($(this).attr("data-base")),
                  s = $(this).val();
              n == t ? (e == s ? jsonobj.push(a) : jsonobj.push(a * i)) : jsonobj.push(parseInt(s));
          }),
          jQuery.post("/cart/update.js", { updates: jsonobj }).done(function () {
              cart_update();
          });
  }),
  $(document).on("click", ".cart-inner .Custom_cart__remove", function (t) {
      t.preventDefault();
      var e = $(this).attr("data-property");
      (jsonobj = []),
          $(".cart-inner .Custom_cart__quantity.cart__quantity").each(function () {
              var t = $(this).attr("data-property"),
                  i = $(this).val();
              e == t ? jsonobj.push(0) : jsonobj.push(parseInt(i));
          }),
          console.log(jsonobj),
          jQuery.post("/cart/update.js", { updates: jsonobj }).done(function () {
              window.location.href = "/cart";
          });
  }),
  $(document).on("click", ".drawer__inner .Custom_cart__remove", function (t) {
      t.preventDefault(), $(".drawer__inner").addClass("overlay-applied");
      var e = $(this).attr("data-property");
      (jsonobj = []),
          $(".drawer__inner .cart__quantity").each(function () {
              var t = $(this).attr("data-property"),
                  i = $(this).val();
              e == t ? jsonobj.push(0) : jsonobj.push(parseInt(i));
          }),
          console.log(jsonobj),
          jQuery.post("/cart/update.js", { updates: jsonobj }).done(function () {
              cart_update();
          });
  }),
  $(document).ready(function () {
      console.log("Price"),
          $(".th_cart_total_price").addClass("hide"),
          $(document).ajaxSuccess(function (t, e, i) {
              -1 != i.url.indexOf("hulkcode.js") &&
                  ($(".th_cart_total_price").addClass("hide"),
                  setTimeout(function () {
                      var t = 0;
                      $(".Select_price_Combination .cart__remove:visible").each(function () {
                          var e = $(this).attr("data-priceehere").split("$");
                          t += Number(parseFloat(e[1]));
                      }),
                          console.log(t),
                          $(".th_cart_total_price span").html("$" + t.toFixed(2));
                  }, 1500),
                  setTimeout(function () {
                      $(".th_cart_total_price").removeClass("hide");
                  }, 1700));
          }),
          setTimeout(function () {
              var t = 0;
              $(".Select_price_Combination .cart__remove:visible").each(function () {
                  var e = $(this).attr("data-priceehere").split("$");
                  t += Number(parseFloat(e[1]));
              }),
                  console.log(t),
                  $(".th_cart_total_price span").html("$" + t.toFixed(2));
          }, 1500),
          setTimeout(function () {
              $(".th_cart_total_price").removeClass("hide");
          }, 1700);
  }),
  $(document).on("click", ".plus_icon2", function (t) {
      t.preventDefault(), $(".drawer__inner").addClass("overlay-applied");
      var e = $(this).parent().find(".cart__quantity").val(),
          i = parseInt(e) + 1;
      $(this).parent().find(".cart__quantity").val(i);
      var n = $(this).parent().find(".cart__quantity").attr("data-index");
      jQuery.post("/cart/change.js", { quantity: i, line: n }).done(function () {
          cart_update();
      });
  }),
  $(document).on("click", ".minus_icon2", function (t) {
      t.preventDefault(), $(".drawer__inner").addClass("overlay-applied");
      var e = $(this).parent().find(".cart__quantity").val(),
          i = parseInt(e) - 1;
      $(this).parent().find(".cart__quantity").val(i);
      var n = $(this).parent().find(".cart__quantity").attr("data-index");
      jQuery.post("/cart/change.js", { quantity: i, line: n }).done(function () {
          cart_update();
      });
  }),
  $(document).on("keyup", ".Custom_cart__quantity.cart__quantity", function (t) {
      t.preventDefault(), $(".drawer__inner").addClass("overlay-applied");
      var e = $(this).parent().find(".cart__quantity").val(),
          i = parseInt(e);
      $(this).parent().find(".cart__quantity").val(i);
      var n = $(this).parent().find(".cart__quantity").attr("data-index");
      jQuery.post("/cart/change.js", { quantity: i, line: n }).done(function () {
          cart_update();
      });
  }),
  $(document).on("click", "button.drawer__close-button.js-drawer-close", function (t) {
      $(".js-drawer-open").trigger("click");
  }),
  $.ajax({
      url: "/",
      type: "GET",
      dataType: "html",
      success: function (t) {
          $(".unlockmsg").html($(t).find(".unlockshtml").html());
      },
      error: function (t, e, i) {},
  }),
  $(document).ready(function () {
      var quantitytoh = $("#quantitytoh").html()
      quantitytoh = parseInt(quantitytoh)
      if(quantitytoh < 1){
        /*
        $(".add-to-cart span").html("PRE-ORDER")
        $(".preorder-text").show()
        */
      }else{
        
        $(".add-to-cart span").html("ADD TO CART")
      }
      $(".js-drawer-open-cart").on("click",function(){
          $(".all-colors .active").trigger('click')
      })
      
      $(".cart-all-products").slick({ dots: !0, infinite: !0, speed: 300, slidesToShow: 1, slidesToScroll: 1, dots: !0, arrows: !0 }),
          $(document).on("click", ".add-cart-drawer", function (t) {
              t.preventDefault();
              var e = $(this).parents(".product-data").find(".all-colors label.active").attr("data-value"),
                  i = $(this).parents(".product-data").find(".size").val();
              if ("2" == $(this).attr("data-size"))
                  var n = i + " / " + e,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("value");
              else
                  var n = i,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("value");
              $(".drawer__inner").addClass("overlay-applied"),
                  $.ajax({
                      type: "POST",
                      url: "/cart/add.js",
                      data: { quantity: 1, id: a },
                      dataType: "json",
                      success: function (t) {
                          $.ajax({
                              url: "/",
                              type: "GET",
                              dataType: "html",
                              success: function (t) {
                                  $(".cart_count_icon").html($(t).find(".cart_count_icon").html()),
                                      $(".drawer__inner").removeClass("overlay-applied"),
                                      $(".cart_drawer_custom").html($(t).find(".cart_drawer_custom").html()),
                                      $(".unlockmsg").html($(t).find(".unlockshtml").html()),
                                      $(".cart-all-products").html(""),
                                      $(".cart-all-products").html($(t).find(".cart-all-products").html()),
                                      $(".cart-all-products").slick({ dots: !0, infinite: !0, speed: 300, slidesToShow: 1, slidesToScroll: 1, dots: !0, arrows: !0 });
                              },
                              error: function (t, e, i) {},
                          });
                      },
                  });
          }),
          $(document).on("click", ".all-colors label", function (t) {
              $(this).parent().find("label").removeClass("active"), $(this).addClass("active");
              var e = $(this).parents(".product-data").find(".all-colors label.active").attr("data-value"),
                  i = $(this).parents(".product-data").find(".size").val();
              if ("2" == $(this).parents(".product-data").find(".add-cart-drawer").attr("data-size")) {
                  var n = i + " / " + e,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("data-avail");
                  "avail" == a ? $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !1).html("ADD") : $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !0).html("PRE-ORDER");
              } else {
                  var n = i,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("data-avail");
                  "avail" == a ? $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !1).html("ADD") : $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !0).html("PRE-ORDER");
              }
          }),
          $(document).on("change", ".variants .size", function (t) {
              var e = $(this).parents(".product-data").find(".size").val();
                  i = $(this).parents(".product-data").find(".type").val();
              if ("2" == $(this).parents(".product-data").find(".add-cart-drawer").attr("data-size")) {
                  var n = i + " / " + e,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("data-avail");
                  "avail" == a ? $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !1).html("ADD") : $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !0).html("PRE-ORDER");
              } else {
                  var n = i,
                      a = $(this)
                          .parents(".product-data")
                          .find(".variproducts div[data-name='" + n + "']")
                          .attr("data-avail");
                  "avail" == a ? $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !1).html("ADD") : $(this).parents(".product-data").find(".add-cart-drawer").attr("disabled", !0).html("PRE-ORDER");
              }
          }),
          $("a.open-cart-drawer-new").click(function () {
              $(".cart-all-products").slick("setPosition");
          });
  });
